$PBExportHeader$f_load_patient_list_items.srf
global type f_load_patient_list_items from function_object
end type

forward prototypes
global function integer f_load_patient_list_items (string ps_cpr_id, ref str_p_patient_list_item pstr_list_item[])
end prototypes

global function integer f_load_patient_list_items (string ps_cpr_id, ref str_p_patient_list_item pstr_list_item[]);
integer li_list_item, li_list_item_count
boolean lb_loop

SELECT count(*) 
INTO :li_list_item_count
FROM p_Patient_List_Item
WHERE cpr_id = :ps_cpr_id;

IF li_list_item_count > 0 THEN
	
	DECLARE list_item_curs Cursor for
		SELECT 	p.list_id, p.list_item, list_item_patient_data
		FROM		p_Patient_List_Item p
					JOIN c_List_Item c ON c.list_id = p.list_id AND c.list_item = p.list_item
		WHERE		cpr_id = :ps_cpr_id
		ORDER BY c.sort_sequence, c.list_item
	USING 	sqlca;	
	OPEN list_item_curs;	
	
	lb_loop = true
	li_list_item = 1
	DO
		
		Fetch list_item_curs into 
				:pstr_list_item[li_list_item].list_id,
				:pstr_list_item[li_list_item].list_item,
				:pstr_list_item[li_list_item].list_item_patient_data;
				
		if not sqlca.check() then return -1
		lb_loop = (sqlca.sqlcode = 0)
		li_list_item++
	LOOP	While lb_loop	
	
	CLOSE list_item_curs;	
END IF

end function

