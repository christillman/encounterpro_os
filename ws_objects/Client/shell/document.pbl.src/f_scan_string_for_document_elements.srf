$PBExportHeader$f_scan_string_for_document_elements.srf
global type f_scan_string_for_document_elements from function_object
end type

forward prototypes
global function str_document_template_fields f_scan_string_for_document_elements (string ps_string)
end prototypes

global function str_document_template_fields f_scan_string_for_document_elements (string ps_string);str_document_template_fields lstr_document_template_fields

// This function scans a string for tokens that represent document elements that will later be substituted for actual runtime values
// A document element token is a string surrounded by curly brackets ({})
// To put a left curly bracket into the template string without having it represent the start of a document element, prefix it with another left bracket
//    i.e.    "{{"   ==>   "{"   not the start of a document element 
// A token string may not contain a left curly bracket.  If one is found then the first left bracket is ignored
// If there is a colon ":" in the token, then the token name will be all the characters before the colon, and the datatype/length
// will be the characters after the colon:  If all of the characters after the colon are numeric then the datatype will be assumed to be
// string, and the numbers represent the datalength.  Otherwise the characters after the colon are assumed to be in the form <datatype>(<datalength>) where:
//   <datatype> = string, number, or datetime
//   <datalength> = the number of characters that will be used to replace the token.  Final value will be truncated or padded as necessary.
//          Numbers will be left padded with spaces, non-numbers will be right padded with spaces.
// E.G. if the token with brackets is {football:number(40)} then the token name is "football", the datatype is "number", and the final value will be
//        left padded with spaces to a length of 40 before replacing the token.


string ls_char
string ls_template
long i
boolean lb_foundleft
string ls_fieldname
long ll_leftpos
long ll_field_start
long ll_field_datalength
string ls_description
long ll_colonpos
string ls_datatype
string ls_target_length
long ll_parenpos

if isnull(ps_string) or ps_string = "" then return lstr_document_template_fields


lb_foundleft = false
ls_char = ""
ls_template = ""

for i = 1 to len(ps_string)
	ls_char = mid(ps_string, i, 1)
	
	if lb_foundleft then
		if ls_char = "{" then
			if i = ll_leftpos + 1 then
				// Back-to-back left brackets
				lb_foundleft = false
				continue  // Skip copying this character to the template string
			else
				// A left bracket was found while looking for a right bracket
				ll_leftpos = i
				ll_field_start = len(ls_template) + 1
			end if
		elseif ls_char = "}" then
			// A right bracket was found
			lstr_document_template_fields.template_field_count += 1
			lstr_document_template_fields.template_field[lstr_document_template_fields.template_field_count].field_start = ll_field_start
			lstr_document_template_fields.template_field[lstr_document_template_fields.template_field_count].field_length = i - ll_leftpos + 1
			
			// Set the properties of the template field
			ls_description = mid(ps_string, ll_leftpos + 1, i - ll_leftpos - 1)
			ll_field_datalength = 0
			ls_datatype = "string"
			
			// See if there is a datatype/length specification
			ll_colonpos = pos(ls_description, ":")
			if ll_colonpos > 0 then
				// hack off the colon and get the target length
				ls_datatype = lower(mid(ls_description, ll_colonpos + 1, len(ls_description) - ll_colonpos))
				ls_description = left(ls_description, ll_colonpos - 1)
				ll_parenpos = pos(ls_datatype, "(")
				if ll_parenpos > 0 then
					ls_target_length = mid(ls_datatype, ll_parenpos + 1, len(ls_datatype) - ll_parenpos - 1)
					ls_datatype = left(ls_datatype, ll_parenpos - 1)
				elseif isnumber(ls_datatype) then
					ls_target_length = ls_datatype
					ls_datatype = "string"
				end if
				
				if isnumber(ls_target_length) then
					ll_field_datalength = long(ls_target_length)
				end if
			end if
			if lower(ls_datatype) = "number" or lower(ls_datatype) = "datetime" then
				lstr_document_template_fields.template_field[lstr_document_template_fields.template_field_count].field_datatype = lower(ls_datatype)
			else
				lstr_document_template_fields.template_field[lstr_document_template_fields.template_field_count].field_datatype = "string"
			end if
			lstr_document_template_fields.template_field[lstr_document_template_fields.template_field_count].description = ls_description
			lstr_document_template_fields.template_field[lstr_document_template_fields.template_field_count].field_datalength = ll_field_datalength
		end if
	elseif ls_char = "{" then
		lb_foundleft = true
		ll_leftpos = i
		ll_field_start = len(ls_template) + 1
	end if
	
	ls_template += ls_char
next

lstr_document_template_fields.template_string = ls_template

return lstr_document_template_fields

end function

