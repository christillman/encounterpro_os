$PBExportHeader$f_get_progress_list.srf
global type f_get_progress_list from function_object
end type

forward prototypes
global function str_progress_list f_get_progress_list (string ps_cpr_id, string ps_context_object, long pl_object_key, string ps_progress_type, string ps_progress_key, string ps_attachments_only_flag)
end prototypes

global function str_progress_list f_get_progress_list (string ps_cpr_id, string ps_context_object, long pl_object_key, string ps_progress_type, string ps_progress_key, string ps_attachments_only_flag);// This scans a datastore and extracts the progress records into a str_progress_list structure.  Progress notes
// with identical progress_key and progress_date_time are considered duplication so only the latest is taken
// If the latest progress records has a null progress value and a null attachment_id then it is considered deleted

long ll_rows
integer li_count
long i
u_ds_data luo_progress
str_progress_list lstr_progress
string ls_progress_short
string ls_progress_long
string ls_progress
long ll_attachment_id
string ls_progress_type
str_progress_type lstr_progress_type
string ls_context_object_type
integer li_sts
string ls_progress_key

li_count = 0
ls_context_object_type = sqlca.fn_context_object_type(ps_context_object, ps_cpr_id, pl_object_key)

luo_progress = CREATE u_ds_data
luo_progress.set_dataobject("dw_sp_get_progress")

ll_rows = luo_progress.retrieve(ps_cpr_id, ps_context_object, pl_object_key, ps_progress_type, ps_progress_key, ps_attachments_only_flag)

// The records are sorted by progress_key (ascending), progress_sequence (descending) so the
// latest record for each key will appear first
for i = 1 to ll_rows
	ls_progress_short = luo_progress.object.progress_value[i]
	ls_progress_long = luo_progress.object.progress[i]
	ls_progress = f_progress_value(ls_progress_short, ls_progress_long)
	ll_attachment_id = luo_progress.object.attachment_id[i]
	ls_progress_type = luo_progress.object.progress_type_original[i]
	ls_progress_key = luo_progress.object.progress_key_original[i]
	
	// If the short and long and attachment_id values are all null then we should interpret it as "not found"
	if isnull(ls_progress_short) and isnull(ls_progress_long) and isnull(ll_attachment_id) then
		// ...unless it's a "special" progress type
		if lower(ls_progress_type) = "created" or lower(ls_progress_type) = "closed" or lower(ls_progress_type) = "reviewed" then
		else
			continue
		end if
	end if
	
	li_count += 1
	lstr_progress.progress[li_count].progress_sequence = luo_progress.object.progress_sequence[i]
	lstr_progress.progress[li_count].encounter_id = luo_progress.object.encounter_id[i]
	lstr_progress.progress[li_count].user_id = luo_progress.object.user_id[i]
	lstr_progress.progress[li_count].progress_date_time = luo_progress.object.progress_date_time[i]
	lstr_progress.progress[li_count].progress_type = ls_progress_type
	lstr_progress.progress[li_count].progress_key = ls_progress_key
	lstr_progress.progress[li_count].progress = ls_progress
	lstr_progress.progress[li_count].attachment_id = ll_attachment_id
	lstr_progress.progress[li_count].created = luo_progress.object.created[i]
	lstr_progress.progress[li_count].created_by = luo_progress.object.created_by[i]

	// Add the progress type structure
	li_sts = datalist.progress_type(ps_context_object, ls_context_object_type, ps_progress_type, lstr_progress_type)
	lstr_progress.progress[li_count].progress_type_properties = lstr_progress_type

	// Populate the progress_key_description and progress_note_description fields
	f_progress_description(lstr_progress.progress[li_count])
next

DESTROY luo_progress

lstr_progress.progress_count = li_count

return lstr_progress

end function

