$PBExportHeader$f_sort_treatments.srf
global type f_sort_treatments from function_object
end type

forward prototypes
global function integer f_sort_treatments (long pl_treatment_count, ref str_treatment_description lstra_treatments[], string ps_sort_column, string ps_sort_direction)
end prototypes

global function integer f_sort_treatments (long pl_treatment_count, ref str_treatment_description lstra_treatments[], string ps_sort_column, string ps_sort_direction);str_treatment_description lstr_temp_trt
boolean lb_less
boolean lb_ascending
long i, j

if lower(left(ps_sort_direction, 1)) = "d" then
	lb_ascending = false
else
	lb_ascending = true
end if

for i = pl_treatment_count to 1 step -1
	for j = 1 to i - 1
		lb_less = false
		
		CHOOSE CASE lower(ps_sort_column)
			CASE "treatment_description"
				if lstra_treatments[i].treatment_description < lstra_treatments[j].treatment_description then lb_less = true
			CASE "begin_date"
				if lstra_treatments[i].begin_date < lstra_treatments[j].begin_date then lb_less = true
			CASE ELSE
				// we don't recognize the column so abort
				return 0
		END CHOOSE
		
		
		if lb_less then
			// If the ith treatment is less than the jth treatment, then swap them
			lstr_temp_trt = lstra_treatments[i]
			lstra_treatments[i] = lstra_treatments[j]
			lstra_treatments[j] = lstr_temp_trt
		end if
	next
next

// If we're not ascending, the reverse the order
if not lb_ascending then
	for i = 1 to int(pl_treatment_count / 2)
		lstr_temp_trt = lstra_treatments[i]
		lstra_treatments[i] = lstra_treatments[pl_treatment_count - i + 1]
		lstra_treatments[pl_treatment_count - i + 1] = lstr_temp_trt
	next
end if

return 1




end function

