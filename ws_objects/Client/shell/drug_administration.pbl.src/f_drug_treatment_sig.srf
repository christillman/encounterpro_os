$PBExportHeader$f_drug_treatment_sig.srf
global type f_drug_treatment_sig from function_object
end type

forward prototypes
global function string f_drug_treatment_sig (str_attributes pstr_attributes)
end prototypes

global function string f_drug_treatment_sig (str_attributes pstr_attributes);/////////////////////////////////////////////////////////////////////////////////////////////////////
//	Return: String
//
// Modified By:Sumathi Chinnasamy									Modified On:09/17/01
//
// Description: generates the drug description by including special ins, refills and other dosage info
//
// Returns null if no drug_id is supplied or if there is an error
// 
////////////////////////////////////////////////////////////////////////////////////////////////////


// attributes passed in
string ls_drug_id
string ls_package_id
real lr_dose_amount
string ls_dose_unit
string ls_administer_frequency
real lr_duration_amount
string ls_duration_unit
string ls_duration_prn
string ls_pharmacist_instructions
string ls_patient_instructions
real lr_dispense_amount
string ls_dispense_unit
integer li_refills
string ls_brand_name_required
integer li_administration_sequence
string ls_dosage_form

// calculated/looked up
String	ls_common_name,ls_description
String	ls_take_as_directed,ls_prescription_flag
String	ls_administer_method
String	ls_temp,ls_duration,ls_brand_necessary
integer li_sts
string ls_null
integer li_admin_count
long i

str_drug_definition 		lstr_drug_definition
str_drug_package        lstr_drug_package
str_package_definition 	lstr_package_definition
str_drug_administration lstra_admin[]

setnull(ls_null)

// Get the passed in attribute into the local variables

ls_drug_id = f_attribute_find_attribute(pstr_attributes, "drug_id")

// If we don't have a drug_id then there's nothing we can do so just use the treatment description
if isnull(ls_drug_id) then return ls_null

ls_package_id = f_attribute_find_attribute(pstr_attributes, "package_id")
lr_dose_amount = real(f_attribute_find_attribute(pstr_attributes, "dose_amount"))
ls_dose_unit = f_attribute_find_attribute(pstr_attributes, "dose_unit")
ls_administer_frequency = f_attribute_find_attribute(pstr_attributes, "administer_frequency")
lr_duration_amount = real(f_attribute_find_attribute(pstr_attributes, "duration_amount"))
ls_duration_unit = f_attribute_find_attribute(pstr_attributes, "duration_unit")
ls_duration_prn = f_attribute_find_attribute(pstr_attributes, "duration_prn")
ls_pharmacist_instructions = f_attribute_find_attribute(pstr_attributes, "pharmacist_instructions")
ls_patient_instructions = f_attribute_find_attribute(pstr_attributes, "patient_instructions")
lr_dispense_amount = real(f_attribute_find_attribute(pstr_attributes, "dispense_amount"))
ls_dispense_unit = f_attribute_find_attribute(pstr_attributes, "dispense_unit")
li_refills = integer(f_attribute_find_attribute(pstr_attributes, "refills"))
ls_brand_name_required = f_attribute_find_attribute(pstr_attributes, "brand_name_required")
li_administration_sequence = integer(f_attribute_find_attribute(pstr_attributes, "administration_sequence"))
ls_dosage_form = f_attribute_find_attribute(pstr_attributes, "dosage_form")


if isnull(ls_package_id) then
	// If we don't have a package, then generate the description from the dosage_form and admin_sequence
	drugdb.get_drug_definition(ls_drug_id, lstr_drug_definition)
	ls_description = lstr_drug_definition.common_name
	
	if not isnull(ls_dosage_form) then
		ls_description += " " + ls_dosage_form
	end if
	
	if not isnull(li_administration_sequence) then
		li_admin_count = f_get_drug_administration(ls_drug_id, lstra_admin)
		for i = 1 to li_admin_count
			if lstra_admin[i].administration_sequence = li_administration_sequence then
				IF NOT IsNull (lstra_admin[i].form_rxcui) THEN
					// We want the RXNORM strength to describe the admin sequence
					ls_description += " " + sqlca.fn_strength(lstra_admin[i].form_rxcui)
				ELSE
					ls_description += " " + lstra_admin[i].description
				END IF
			end if
		next
	end if
else
	drugdb.get_drug_package(ls_drug_id,ls_package_id,&
									lstr_drug_definition,lstr_package_definition,lstr_drug_package)
	
	ls_take_as_directed = lstr_drug_package.take_as_directed
	ls_prescription_flag = lstr_drug_package.prescription_flag
	// administer method no longer part of the package 
	// ls_administer_method = lstr_package_definition.administer_method
	
	// Check whether it's prescription drug
	ls_description = ""
	
	ls_description = lstr_drug_definition.common_name + ", " +lstr_package_definition.description + ":"
	
	If ls_take_as_directed = "Y" Then
		ls_description += "  Take As Directed"
	Else
		If not isnull(lr_dose_amount) Then
			ls_temp = f_pretty_amount_unit(lr_dose_amount, ls_dose_unit)
			if not isnull(ls_temp) then
				ls_description += "  " + ls_temp
			end if
		End if
		
		If not isnull(ls_administer_method) then
			ls_description += " " + ls_administer_method
		End if
		
		If not isnull(ls_administer_frequency) then
			ls_description += " " + ls_administer_frequency
		End if
		
		setnull(ls_duration)
		If isnull(ls_duration_prn) then
			If lr_duration_amount > 0 and not isnull(ls_duration_unit) then
				ls_duration = f_pretty_amount_unit(lr_duration_amount, ls_duration_unit)
			Elseif lr_duration_amount = -1 then
				ls_duration = "Indefinite"
			End if
		Else
			ls_duration = "PRN " + string(ls_duration_prn)
		End if
		If not isnull(ls_duration) and lr_duration_amount >= 0 then
			ls_description += " x " + ls_duration
		End if
	End if
end if

If not isnull(ls_dispense_unit) and lr_dispense_amount > 0 and not isnull(lr_dispense_amount) THEN
	ls_description += ", Dispense: " + f_pretty_amount_unit(lr_dispense_amount, ls_dispense_unit)
	IF isnull(li_refills) or li_refills = 0 THEN
		ls_description += "  No Refills"
	ELSEIf li_refills = -1 Then
		ls_description += "  Refills PRN"
	ELSE
		ls_description += "  " + string(li_refills) + " Refill"
		IF li_refills > 1 THEN ls_description += "s"
	END IF
END IF

IF ls_brand_name_required = "Y" THEN
	ls_brand_necessary = datalist.get_preference("PREFERENCES","brand_necessary_phrase")
	If Not Isnull(ls_brand_necessary) Then
		ls_description += "  " + ls_brand_necessary
	else
		ls_description += "Brand Necessary"
	end if
END IF

Return trim(ls_description)

end function

