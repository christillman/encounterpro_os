$PBExportHeader$tf_get_procedure_detail.srf
global type tf_get_procedure_detail from function_object
end type

forward prototypes
global function integer tf_get_procedure_detail (string ps_procedure_id, ref string ps_description, ref string ps_cpt_code, ref string ps_procedure_category_id, ref string ps_category_description, ref decimal pdc_charge)
end prototypes

global function integer tf_get_procedure_detail (string ps_procedure_id, ref string ps_description, ref string ps_cpt_code, ref string ps_procedure_category_id, ref string ps_category_description, ref decimal pdc_charge);string ls_description
string ls_cpt_code
string ls_procedure_category_id
string ls_category_description
decimal ldc_charge
integer li_sts

tf_begin_transaction(this, "tf_get_procedure_detail()")

  SELECT c_Procedure.description,
  			c_Procedure.cpt_code,
			c_Procedure.procedure_category_id,
			category_description=c_Procedure_Category.description,
			c_Procedure.charge
    INTO :ls_description,
	 		:ls_cpt_code,
			:ls_procedure_category_id,
			:ls_category_description,
			:ldc_charge
    FROM c_Procedure,
	 		c_Procedure_Category
   WHERE procedure_id = :ps_procedure_id
	AND	c_Procedure.procedure_type = c_Procedure_Category.procedure_type
	AND   c_Procedure.procedure_category_id = c_Procedure_Category.procedure_category_id;

if not tf_check() then return -1

if sqlca.sqlcode = 100 then
	li_sts = 0
else
	li_sts = 1
end if

tf_commit()

if li_sts = 1 then
	ps_description = ls_description
	ps_cpt_code = ls_cpt_code
	ps_procedure_category_id = ls_procedure_category_id
	ps_category_description = ls_category_description
	pdc_charge = ldc_charge
end if

return li_sts

end function

