$PBExportHeader$f_get_collection_example.srf
global type f_get_collection_example from function_object
end type

forward prototypes
global function str_property_value f_resolve_collection_field (str_document_element_set_collection pstr_collection, long pl_collection_index, str_document_element_mapping pstr_mapping, str_complete_context pstr_context, str_attributes pstr_attributes)
global function str_document_element_set_collection f_get_collection_example (str_document_element_set pstr_element_set, str_complete_context pstr_context, str_attributes pstr_attributes)
end prototypes

global function str_property_value f_resolve_collection_field (str_document_element_set_collection pstr_collection, long pl_collection_index, str_document_element_mapping pstr_mapping, str_complete_context pstr_context, str_attributes pstr_attributes);str_property_value lstr_property_value
str_property_value lstr_property_value2
string ls_left_side
string ls_right_side
long i

//CHOOSE CASE upper(pstr_collection.collectiontype)
//	CASE "EDAS"
//		// The mapped property is the left side
//		lstr_property_value = f_edas_interpret_nested_address(pstr_collection.collectionobject, &
//																				pstr_collection.key[pl_collection_index], &
//																				pstr_mapping.mapped_property, &
//																				pstr_context, &
//																				pstr_attributes)
//	CASE "SQL", "DATAWINDOW"
//	CASE ELSE
//END CHOOSE
//																
//// Loop through the rules and see if we have a return value
//ls_left_side = lstr_property_value.display_value
//for i = 1 to pstr_mapping.mapping_rule_count
//	// Resolve the right side
//	lstr_property_value2 = f_edas_interpret_nested_address(ps_from_object, &
//																				ps_object_key, &
//																				pstr_mapping.mapping_rule[i].right_side, &
//																				pstr_context, &
//																				pstr_attributes)
//	ls_right_side = lstr_property_value2.display_value
//	
//	// Now compare the left and right sides
//	if f_string_compare(ls_left_side, ls_right_side, pstr_mapping.mapping_rule[i].operator) then
//		// The comparison was true so if there is a true value then we're done
//		if len(pstr_mapping.mapping_rule[i].true_value) > 0 then
//			return f_edas_interpret_nested_address(ps_from_object, &
//																	ps_object_key, &
//																	pstr_mapping.mapping_rule[i].true_value, &
//																	pstr_context, &
//																	pstr_attributes)
//		end if
//	else
//		// The comparison was false so if there is a false value then we're done
//		if len(pstr_mapping.mapping_rule[i].false_value) > 0 then
//			return f_edas_interpret_nested_address(ps_from_object, &
//																	ps_object_key, &
//																	pstr_mapping.mapping_rule[i].false_value, &
//																	pstr_context, &
//																	pstr_attributes)
//		end if
//	end if
//next
//
//
//// If we get here then none of the rules resulted in a return value.  In this case just return the resolved mapped property
return lstr_property_value
//
//
end function

global function str_document_element_set_collection f_get_collection_example (str_document_element_set pstr_element_set, str_complete_context pstr_context, str_attributes pstr_attributes);str_document_element_set_collection lstr_collection
str_property_value lstr_property_value
string ls_example_key
integer li_sts
string ls_temp_proc_name
string ls_sql
string ls_error_create
string ls_procdef
string ls_document_patient_workplan_item_id
long ll_pos
string ls_objects_magic_table

ls_objects_magic_table = "x_document_objects"

lstr_collection.collectiontype = pstr_element_set.maptocollectiontype
lstr_collection.collectiondefinition = pstr_element_set.collectiondefinition

ls_document_patient_workplan_item_id = f_attribute_find_attribute(pstr_attributes, "document_patient_workplan_item_id")

if pstr_element_set.maptocollection and len(lstr_collection.collectiondefinition) > 0 then
	// If we have a collection definition, then resolve the collection into a list of objects/records
	CHOOSE CASE upper(lstr_collection.collectiontype)
		CASE "EDAS"
			li_sts = f_edas_example_object(lstr_collection.collectiondefinition,  &
														pstr_context, &
														pstr_attributes, &
														lstr_collection.collectionobject, &
														ls_example_key)
			
			if li_sts > 0 and len(lstr_collection.collectionobject) > 0 and len(ls_example_key) > 0 then
				lstr_collection.collectionobjectcount = 1
				lstr_collection.collectionobjectkey[1] = ls_example_key
			end if
		CASE "SQL"
			ll_pos = 1
			DO WHILE true
				// See if the script uses the magic table x_document_objects
				ll_pos = pos(lower(ls_procdef), lower(ls_objects_magic_table), ll_pos)
				if ll_pos > 0 then
					if isnull(ls_document_patient_workplan_item_id) then
						log.log(po_null, "f_get_collection_example.0041", "Script refers to x_document_objects, but no document_patient_workplan_item_id is found", 4)
						return lstr_collection
					else
						// Replace the string with one that will match the substitution later
						ls_procdef = left(ls_procdef, ll_pos - 1) + ls_objects_magic_table + mid(ls_procdef, ll_pos + len(ls_objects_magic_table))
					end if
				else
					exit
				end if
			LOOP
			
			// First create a temporary stored procedure with the SQL as the body
			ls_temp_proc_name = sqlca.temp_proc_name()
			ls_procdef = f_attribute_value_substitute_string(lstr_collection.collectiondefinition, pstr_context, pstr_attributes)
			
			// convert reference to fn_interface_objects_to_send  to  fn_interface_objects_to_send_sample
			ls_procdef = f_string_substitute(ls_procdef, ls_objects_magic_table, "dbo.fn_interface_objects_to_send_sample(" + ls_document_patient_workplan_item_id + ")")

			ls_sql = "CREATE PROCEDURE " + ls_temp_proc_name + " AS " + ls_procdef
			EXECUTE IMMEDIATE :ls_sql;
			if not tf_check() then
				log.log(po_null, "f_get_collection_example.0041", "Error creating temp procedure:~r~n" + ls_procdef, 4)
				setnull(lstr_collection.collectiondata)
				return lstr_collection
			end if
			
			// The create a datawindow from the temp stored procedure
			ls_sql = "EXECUTE " + ls_temp_proc_name
			
			lstr_collection.collectiondata = CREATE u_ds_data
			li_sts = lstr_collection.collectiondata.create_from_query(ls_sql)
			if li_sts < 0 then
				log.log(po_null, "f_get_collection_example.0041", "Error executing SQL:~r~n" + ls_procdef, 4)
				DESTROY lstr_collection.collectiondata
				setnull(lstr_collection.collectiondata)
				return lstr_collection
			end if
		CASE "DATAWINDOW"
			// Create the datastore
			lstr_collection.collectiondata = CREATE u_ds_data
			lstr_collection.collectiondata.Create(lstr_collection.collectiondefinition, ls_error_create)
			if Len(ls_error_create) > 0 THEN
				if isnull(ls_error_create) then ls_error_create = "<Null>"
				log.log(po_null, "f_get_collection_example.0041", "Error creating datastore (" + ls_error_create + ")", 4)
				DESTROY lstr_collection.collectiondata
				setnull(lstr_collection.collectiondata)
				return lstr_collection
			end if
		CASE ELSE
	END CHOOSE
else
	// Otherwise there is no collection object
	lstr_collection.collectionobjectcount = 0
end if

return lstr_collection


end function

