$PBExportHeader$f_property_value_display.srf
global type f_property_value_display from function_object
end type

forward prototypes
global function string f_property_value_display (string ps_property, string ps_value)
end prototypes

global function string f_property_value_display (string ps_property, string ps_value);string ls_pretty_text
str_c_workplan lstr_workplan
str_package_definition lstr_package
str_drug_definition lstr_drug
integer li_sts
long ll_material_id
long ll_temp

setnull(ls_pretty_text)

if isnull(ps_value) then return ls_pretty_text

// Now convert to a pretty value
CHOOSE CASE lower(ps_property)
	CASE "age_range", "age_range_id"
		if isnumber(ps_value) then
			ll_temp = long(ps_value)
			SELECT description
			INTO :ls_pretty_text
			FROM c_Age_Range
			WHERE age_range_id = :ll_temp;
			if not tf_check() then
				ls_pretty_text = ps_value
			elseif sqlca.sqlcode = 100 then
				ls_pretty_text = ps_value
			end if
		else
			ls_pretty_text = ps_value
		end if
	CASE "assessment_id", "referral_question_assmnt_id"
		ls_pretty_text = datalist.assessment_description(ps_value)
	CASE "user_id", "ordered_for", "ordered_by", "created_by", "owned_by", "attending_doctor", "diagnosed_by", "attached_by", "completed_by", "observed_by", "primary_provider_id", "secondary_provider_id",  "current_user",  "current_scribe"
		ls_pretty_text = user_list.user_full_name(ps_value)
	CASE "service", "ordered_service"
		ls_pretty_text = datalist.service_description(ps_value)
	CASE "treatment_type", "ordered_treatment_type"
		ls_pretty_text = datalist.treatment_type_description(ps_value)
	CASE "workplan_id", "ordered_workplan_id", "followup_workplan_id"
		lstr_workplan = datalist.get_workplan(long(ps_value))
		if not isnull(lstr_workplan.workplan_id) then
			ls_pretty_text = lstr_workplan.description
		end if
	CASE "package_id"
		li_sts = drugdb.get_package_definition( ps_value, lstr_package)
		if li_sts <= 0 then
			ls_pretty_text = ps_value
		else
			ls_pretty_text = lstr_package.description
		end if
	CASE "procedure_id"
		SELECT description
		INTO :ls_pretty_text
		FROM c_Procedure
		WHERE procedure_id = :ps_value;
		if not tf_check() or sqlca.sqlcode = 100 then ls_pretty_text = ps_value
	CASE "consultant_id", "referring_provider_id", "referring_doctor"
		ls_pretty_text = datalist.consultant_description(ps_value)
	CASE "specialty_id"
		ls_pretty_text = datalist.specialty_description(ps_value)
	CASE "drug_id"
		li_sts = drugdb.get_drug_definition( ps_value, lstr_drug)
		if li_sts <= 0 then
			ls_pretty_text = ps_value
		else
			ls_pretty_text = lstr_drug.common_name
		end if
	CASE "material_id"
		ll_material_id = long(ps_value)
		SELECT title
		INTO :ls_pretty_text
		FROM c_Patient_Material
		WHERE material_id = :ll_material_id;
		if not tf_check() or sqlca.sqlcode = 100 then ls_pretty_text = ps_value
	CASE "observation_id"
		ls_pretty_text = datalist.observation_description(ps_value)
	CASE "unit_id", "dose_unit", "duration_unit", "dispense_unit"
		ls_pretty_text = unit_list.unit_description(ps_value)
	CASE "office_id"
		ls_pretty_text = datalist.office_description(ps_value)
	CASE "room_id", "patient_location"
		ls_pretty_text = room_list.room_name(ps_value)
	CASE "location"
		ls_pretty_text = datalist.location_description(ps_value)
	CASE "status"
		if isnull(ps_value) then
			ls_pretty_text = "Open"
		else
			ls_pretty_text = wordcap(ps_value)
		end if
	CASE ELSE
		if right(lower(ps_property), 5) = "_flag" then
			ls_pretty_text = f_boolean_to_string(f_string_to_boolean(ps_value))
		else
			ls_pretty_text = ps_value
		end if
END CHOOSE

// Since we already checked for a null ps_value above, if we have a null ls_pretty_text here
// then we'll just display the raw value
if isnull(ls_pretty_text) then ls_pretty_text = ps_value

return ls_pretty_text

end function

