$PBExportHeader$f_xml_add_document_templates.srf
global type f_xml_add_document_templates from function_object
end type

forward prototypes
global function string f_xml_add_document_templates (str_document_templates pstr_document_templates)
global subroutine f_xml_add_document_templates (pbdom_element po_parent_element, str_document_templates pstr_document_templates)
end prototypes

global function string f_xml_add_document_templates (str_document_templates pstr_document_templates);string ls_xml
long i, j, k
integer li_sts
PBDOM_Element lo_root
PBDOM_Element lo_template
PBDOM_Element lo_element
PBDOM_Element lo_element2
PBDOM_Element lo_element3
PBDOM_Element lo_element4
PBDOM_Document lo_document
string ls_null
long ll_template
string ls_hexdata
string ls_xmldatetime

setnull(ls_null)

if pstr_document_templates.template_count <= 0 then return ""

TRY
	lo_document = CREATE PBDOM_Document
	lo_document.newdocument("DocumentTemplates")

	lo_root = CREATE PBDOM_Element
	lo_root.setname("DocumentTemplates")
	
	for ll_template = 1 to pstr_document_templates.template_count
		if len(pstr_document_templates.template[ll_template].templatefile.templatedata) > 0 then
			lo_template = CREATE PBDOM_Element
			lo_template.setname("Template")
			lo_root.addcontent(lo_template)
			
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("Description")
			lo_element2.addcontent(pstr_document_templates.template[ll_template].description)
			lo_template.addcontent(lo_element2)
			
			if pstr_document_templates.template[ll_template].sortsequence >= 0 then
				lo_element2 = CREATE PBDOM_Element
				lo_element2.setname("SortSequence")
				lo_element2.addcontent(string(pstr_document_templates.template[ll_template].sortsequence))
				lo_template.addcontent(lo_element2)
			end if
			
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("TemplateFile")
			lo_template.addcontent(lo_element2)
			
			if len(pstr_document_templates.template[ll_template].templatefile.filename) > 0 then
				lo_element3 = CREATE PBDOM_Element
				lo_element3.setname("FileName")
				lo_element3.addcontent(pstr_document_templates.template[ll_template].templatefile.filename)
				lo_element2.addcontent(lo_element3)
			end if
			
			if len(pstr_document_templates.template[ll_template].templatefile.filetype) > 0 then
				lo_element3 = CREATE PBDOM_Element
				lo_element3.setname("FileType")
				lo_element3.addcontent(pstr_document_templates.template[ll_template].templatefile.filetype)
				lo_element2.addcontent(lo_element3)
			end if
			
			lo_element3 = CREATE PBDOM_Element
			lo_element3.setname("TemplateData")		
			ls_hexdata = common_thread.inv_CoderObject.HexEncode(pstr_document_templates.template[ll_template].templatefile.templatedata)
			lo_element3.addcontent(ls_hexdata)
			lo_element2.addcontent(lo_element3)
	
			if not isnull(pstr_document_templates.template[ll_template].templatefile.modifieddate) then
				lo_element3 = CREATE PBDOM_Element
				lo_element3.setname("ModifiedDate")
				ls_xmldatetime = string(pstr_document_templates.template[ll_template].templatefile.modifieddate, "yyyymmddThhmmss")
				lo_element3.addcontent(ls_xmldatetime)
				lo_element2.addcontent(lo_element3)
			end if
		end if
	next
	
	lo_document.setrootelement(lo_root)
CATCH (throwable lo_error)
	log.log(po_null, "f_xml_add_document_templates:0081", "Error creating wrapper (" + lo_error.text + ")", 4)
	return ls_null
END TRY

ls_xml = lo_document.savedocumentintostring( )


return ls_xml


end function

global subroutine f_xml_add_document_templates (pbdom_element po_parent_element, str_document_templates pstr_document_templates);string ls_xml
long i, j, k
integer li_sts
//PBDOM_Element po_parent_element
PBDOM_Element lo_template
PBDOM_Element lo_element
PBDOM_Element lo_element2
PBDOM_Element lo_element3
PBDOM_Element lo_element4
string ls_null
long ll_template
string ls_hexdata
string ls_xmldatetime

setnull(ls_null)

if pstr_document_templates.template_count <= 0 then return

TRY
	for ll_template = 1 to pstr_document_templates.template_count
		if len(pstr_document_templates.template[ll_template].templatefile.templatedata) > 0 then
			lo_template = CREATE PBDOM_Element
			lo_template.setname("Template")
			po_parent_element.addcontent(lo_template)
			
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("Description")
			lo_element2.addcontent(pstr_document_templates.template[ll_template].description)
			lo_template.addcontent(lo_element2)
			
			if pstr_document_templates.template[ll_template].sortsequence >= 0 then
				lo_element2 = CREATE PBDOM_Element
				lo_element2.setname("SortSequence")
				lo_element2.addcontent(string(pstr_document_templates.template[ll_template].sortsequence))
				lo_template.addcontent(lo_element2)
			end if
			
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("TemplateFile")
			lo_template.addcontent(lo_element2)
			
			if len(pstr_document_templates.template[ll_template].templatefile.filename) > 0 then
				lo_element3 = CREATE PBDOM_Element
				lo_element3.setname("FileName")
				lo_element3.addcontent(pstr_document_templates.template[ll_template].templatefile.filename)
				lo_element2.addcontent(lo_element3)
			end if
			
			if len(pstr_document_templates.template[ll_template].templatefile.filetype) > 0 then
				lo_element3 = CREATE PBDOM_Element
				lo_element3.setname("FileType")
				lo_element3.addcontent(pstr_document_templates.template[ll_template].templatefile.filetype)
				lo_element2.addcontent(lo_element3)
			end if
			
			lo_element3 = CREATE PBDOM_Element
			lo_element3.setname("TemplateData")
			ls_hexdata = common_thread.inv_CoderObject.HexEncode(pstr_document_templates.template[ll_template].templatefile.templatedata)
			lo_element3.addcontent(ls_hexdata)
			lo_element2.addcontent(lo_element3)
	
			if not isnull(pstr_document_templates.template[ll_template].templatefile.modifieddate) then
				lo_element3 = CREATE PBDOM_Element
				lo_element3.setname("ModifiedDate")
				ls_xmldatetime = string(pstr_document_templates.template[ll_template].templatefile.modifieddate, "yyyymmddThhmmss")
				lo_element3.addcontent(ls_xmldatetime)
				lo_element2.addcontent(lo_element3)
			end if
			
			f_xml_add_document_templates(lo_template, pstr_document_templates.template[ll_template].templates)
		end if
	next
CATCH (throwable lo_error)
	log.log(po_null, "f_xml_add_document_templates:0074", "Error adding templates (" + lo_error.text + ")", 4)
	return
END TRY

return


end subroutine

