$PBExportHeader$f_get_document_elements_xml.srf
global type f_get_document_elements_xml from function_object
end type

forward prototypes
global function string f_get_document_elements_xml (str_document_elements pstr_document_elements)
end prototypes

global function string f_get_document_elements_xml (str_document_elements pstr_document_elements);string ls_xml
long i, j, k
integer li_sts
PBDOM_Element lo_root
PBDOM_Element lo_element_set
PBDOM_Element lo_element
PBDOM_Element lo_element2
PBDOM_Element lo_element3
PBDOM_Element lo_element4
PBDOM_Document lo_document
string ls_null
long ll_set

setnull(ls_null)

if pstr_document_elements.element_set_count <= 0 then return ""

TRY
	lo_document = CREATE PBDOM_Document
	lo_document.newdocument("DocumentElements")

	lo_root = CREATE PBDOM_Element
	lo_root.setname("DocumentElements")
	
	for ll_set = 1 to pstr_document_elements.element_set_count
		lo_element_set = CREATE PBDOM_Element
		lo_element_set.setname("ElementSet")
		lo_root.addcontent(lo_element_set)
		
		lo_element2 = CREATE PBDOM_Element
		lo_element2.setname("Description")
		lo_element2.addcontent(pstr_document_elements.element_set[ll_set].description)
		lo_element_set.addcontent(lo_element2)
		
		if not isnull(pstr_document_elements.element_set[ll_set].maptocollection) then
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("MapToCollection")
			if pstr_document_elements.element_set[ll_set].maptocollection then
				lo_element2.addcontent("Y")
			else
				lo_element2.addcontent("N")
			end if
			lo_element_set.addcontent(lo_element2)
		end if
		
		if pstr_document_elements.element_set[ll_set].maptocollection and len(pstr_document_elements.element_set[ll_set].maptocollectiontype) > 0 then
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("MapToCollectionType")
			lo_element2.addcontent(pstr_document_elements.element_set[ll_set].maptocollectiontype)
			lo_element_set.addcontent(lo_element2)
		end if

		if pstr_document_elements.element_set[ll_set].maptocollection and len(pstr_document_elements.element_set[ll_set].collectiondefinition) > 0 then
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("CollectionDefinition")
			lo_element2.settext(pstr_document_elements.element_set[ll_set].collectiondefinition)
			lo_element_set.addcontent(lo_element2)
		end if
		
		for k = 1 to pstr_document_elements.element_set[ll_set].collection_rule_count
			lo_element3 = CREATE PBDOM_Element
			lo_element3.setname("CollectionRule")
			lo_element2.addcontent(lo_element3)
		
			if len(pstr_document_elements.element_set[ll_set].collection_rule[k].operator) > 0 then
				lo_element4 = CREATE PBDOM_Element
				lo_element4.setname("Operator")
				lo_element4.addcontent(pstr_document_elements.element_set[ll_set].collection_rule[k].operator)
				lo_element3.addcontent(lo_element4)
			end if
			
			if len(pstr_document_elements.element_set[ll_set].collection_rule[k].Right_Side) > 0 then
				lo_element4 = CREATE PBDOM_Element
				lo_element4.setname("RightSide")
				lo_element4.addcontent(pstr_document_elements.element_set[ll_set].collection_rule[k].Right_Side)
				lo_element3.addcontent(lo_element4)
			end if
			
			if len(pstr_document_elements.element_set[ll_set].collection_rule[k].True_Value) > 0 then
				lo_element4 = CREATE PBDOM_Element
				lo_element4.setname("TrueValue")
				lo_element4.addcontent(pstr_document_elements.element_set[ll_set].collection_rule[k].True_Value)
				lo_element3.addcontent(lo_element4)
			end if
			
			if len(pstr_document_elements.element_set[ll_set].collection_rule[k].False_Value) > 0 then
				lo_element4 = CREATE PBDOM_Element
				lo_element4.setname("FalseValue")
				lo_element4.addcontent(pstr_document_elements.element_set[ll_set].collection_rule[k].False_Value)
				lo_element3.addcontent(lo_element4)
			end if
		next
		
		for i = 1 to pstr_document_elements.element_set[ll_set].element_count
			lo_element = CREATE PBDOM_Element
			lo_element.setname("Element")
			lo_element_set.addcontent(lo_element)
			
			lo_element2 = CREATE PBDOM_Element
			lo_element2.setname("Name")
			lo_element2.addcontent(pstr_document_elements.element_set[ll_set].element[i].element)
			lo_element.addcontent(lo_element2)
	
			if len(pstr_document_elements.element_set[ll_set].element[i].description) > 0 then
				lo_element2 = CREATE PBDOM_Element
				lo_element2.setname("Description")
				lo_element2.addcontent(pstr_document_elements.element_set[ll_set].element[i].description)
				lo_element.addcontent(lo_element2)
	
			end if
			
			if len(pstr_document_elements.element_set[ll_set].element[i].datatype) > 0 then
				lo_element2 = CREATE PBDOM_Element
				lo_element2.setname("Datatype")
				lo_element2.addcontent(pstr_document_elements.element_set[ll_set].element[i].datatype)
				lo_element.addcontent(lo_element2)
			end if
	
			if pstr_document_elements.element_set[ll_set].element[i].maxlength > 0 then
				lo_element2 = CREATE PBDOM_Element
				lo_element2.setname("MaxLength")
				lo_element2.addcontent(string(pstr_document_elements.element_set[ll_set].element[i].maxlength))
				lo_element.addcontent(lo_element2)
			end if
	
			for j = 1 to pstr_document_elements.element_set[ll_set].element[i].enumerated_count
				if len(pstr_document_elements.element_set[ll_set].element[i].enumerated_value[j]) > 0 then
					lo_element2 = CREATE PBDOM_Element
					lo_element2.setname("DomainItem")
					lo_element2.addcontent(pstr_document_elements.element_set[ll_set].element[i].enumerated_value[j])
					lo_element.addcontent(lo_element3)
				end if
			next
	
			for j = 1 to pstr_document_elements.element_set[ll_set].element[i].mapped_property_count
				lo_element2 = CREATE PBDOM_Element
				lo_element2.setname("MappedProperty")
				lo_element.addcontent(lo_element2)
				
				if len(pstr_document_elements.element_set[ll_set].element[i].Mapped_Property[j].mapped_property) > 0 then
					lo_element3 = CREATE PBDOM_Element
					lo_element3.setname("MappedProperty")
					lo_element3.addcontent(pstr_document_elements.element_set[ll_set].element[i].Mapped_Property[j].mapped_property)
					lo_element2.addcontent(lo_element3)
					
					if pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.display_code &
						or len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.format_string) > 0 &
						or len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.lookup_code_domain) > 0  then
							lo_element3 = CREATE PBDOM_Element
							lo_element3.setname("PropertySuffix")
							lo_element2.addcontent(lo_element3)
							
							if pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.display_code then
								lo_element4 = CREATE PBDOM_Element
								lo_element4.setname("DisplayCode")
								lo_element4.addcontent(f_boolean_to_string(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.display_code))
								lo_element3.addcontent(lo_element4)
							end if
							
							if len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.format_string) > 0 then
								lo_element4 = CREATE PBDOM_Element
								lo_element4.setname("FormatString")
								lo_element4.addcontent(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.format_string)
								lo_element3.addcontent(lo_element4)
							end if
							
							if len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.lookup_code_domain) > 0  then
								lo_element4 = CREATE PBDOM_Element
								lo_element4.setname("LookupOwnerID")
								lo_element4.addcontent(string(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.lookup_owner_id))
								lo_element3.addcontent(lo_element4)
								
								lo_element4 = CREATE PBDOM_Element
								lo_element4.setname("LookupCodeDomain")
								lo_element4.addcontent(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].suffix.lookup_code_domain)
								lo_element3.addcontent(lo_element4)
							end if
					end if
				end if
				
				for k = 1 to pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule_count
					lo_element3 = CREATE PBDOM_Element
					lo_element3.setname("MappingRule")
					lo_element2.addcontent(lo_element3)
				
					if len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].operator) > 0 then
						lo_element4 = CREATE PBDOM_Element
						lo_element4.setname("Operator")
						lo_element4.addcontent(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].operator)
						lo_element3.addcontent(lo_element4)
					end if
					
					if len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].Right_Side) > 0 then
						lo_element4 = CREATE PBDOM_Element
						lo_element4.setname("RightSide")
						lo_element4.addcontent(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].Right_Side)
						lo_element3.addcontent(lo_element4)
					end if
					
					if len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].True_Value) > 0 then
						lo_element4 = CREATE PBDOM_Element
						lo_element4.setname("TrueValue")
						lo_element4.addcontent(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].True_Value)
						lo_element3.addcontent(lo_element4)
					end if
					
					if len(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].False_Value) > 0 then
						lo_element4 = CREATE PBDOM_Element
						lo_element4.setname("FalseValue")
						lo_element4.addcontent(pstr_document_elements.element_set[ll_set].element[i].mapped_property[j].mapping_rule[k].False_Value)
						lo_element3.addcontent(lo_element4)
					end if
				next
			next
		next
	next
	
	lo_document.setrootelement(lo_root)
CATCH (throwable lo_error)
	log.log(po_null, "f_get_document_elements_xml:0220", "Error creating wrapper (" + lo_error.text + ")", 4)
	return ls_null
END TRY

ls_xml = lo_document.savedocumentintostring( )


return ls_xml


end function

