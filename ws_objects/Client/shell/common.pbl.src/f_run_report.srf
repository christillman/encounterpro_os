$PBExportHeader$f_run_report.srf
global type f_run_report from function_object
end type

forward prototypes
global function integer f_run_report (string ps_report_id, str_complete_context pstr_context, str_attributes pstr_attributes, string ps_document_format, boolean pb_prompt_for_runtime_params, ref str_external_observation_attachment pstr_document_file)
end prototypes

global function integer f_run_report (string ps_report_id, str_complete_context pstr_context, str_attributes pstr_attributes, string ps_document_format, boolean pb_prompt_for_runtime_params, ref str_external_observation_attachment pstr_document_file);String					buttons[]
String 					ls_component_id
String 					ls_destination
String 					ls_get_params
Long						ll_encounter_id,ll_patient_workplan_id
Integer 					li_sts,i,button_pressed
Integer 					li_attribute_count
Boolean					lb_display, lb_print,lb_show_toolbar = false
Boolean					lb_encounter_exists
window					lw_pop_buttons
u_component_report 	luo_report
str_params				lstr_params
str_popup				popup
str_popup_return 		popup_return
str_attributes 			lstr_attributes
string ls_report_type
string ls_printer
string ls_report_office_id
string ls_attribute
string ls_value
string ls_cpr_id
string ls_from_user_id
string ls_description
string ls_service
string ls_sql
long ll_computer_id
string ls_null
u_user luo_reader
boolean lb_loop
string ls_this_document_format
long ll_max_attribute_sequence
string ls_linked_report_attribute
string ls_linked_report_id

setnull(ls_cpr_id)
setnull(ll_patient_workplan_id)
setnull(ls_from_user_id)
setnull(ls_description)
setnull(ls_service)
setnull(ls_null)

if isnull(ps_report_id) then
	log.log(po_null, "f_run_report:0043", "Null report_id", 4)
	return -1
end if

// Get the document format
SELECT document_format
INTO :ls_this_document_format
FROM c_Report_Definition
WHERE report_id = :ps_report_id;
If Not tf_check() Then Return -1
if sqlca.sqlnrows = 0 then
	log.log(po_null, "f_run_report:0054", "report_id not found (" + ps_report_id + ")", 4)
	return -1
end if


// If a non blank document_format was passed in then that format is required
if lower(ls_this_document_format) <> lower(ps_document_format) and len(ps_document_format) > 0 then
	// The required document format doesn't match the document format of the passed in report
	// We can resolve this if the passed in report has a link to a report of the correct format
	ls_linked_report_attribute = ps_document_format + "_report_id"
	
	SELECT max(attribute_sequence)
	INTO :ll_max_attribute_sequence
	FROM c_Report_Attribute
	WHERE report_id = :ps_report_id
	AND attribute = :ls_linked_report_attribute;
	if not tf_check() then return -1
	
	if isnull(ll_max_attribute_sequence) then
		log.log(po_null, "f_run_report:0073", "A " + ps_document_format + " readable document is required", 4)
		return -1
	end if
	
	SELECT value
	INTO :ls_linked_report_id
	FROM c_Report_Attribute
	WHERE report_id = :ps_report_id
	AND attribute = :ls_linked_report_attribute
	AND attribute_sequence = :ll_max_attribute_sequence;
	if not tf_check() then return -1
	
	ps_report_id = ls_linked_report_id
end if


// Now run the appropriate report

// Get the component_id and the SQL query
SELECT component_id, sql
INTO :ls_component_id, :ls_sql
FROM c_Report_Definition
WHERE report_id = :ps_report_id;
If Not tf_check() Then Return -1

// If the pb_prompt_for_runtime_params flag is set and we're in client mode then prompt the user for any runtime params
If cpr_mode = "CLIENT" and pb_prompt_for_runtime_params Then
	li_sts = f_get_params(ps_report_id, "Runtime", pstr_attributes)
	if li_sts < 0 then return 0
end if

// If we have a SQL script then perform any required substitutions and add it to the attributes.
if not isnull(ls_sql) then
	ls_sql = f_string_substitute_attributes(ls_sql, pstr_attributes)
	f_attribute_add_attribute(pstr_attributes, "SQLQUERY", ls_sql)
end if

ls_destination = "FILE"

// If any component defined for selected report then
If Isnull(ls_component_id) Then
	log.log(po_null, "f_run_report:0114", "Null component_id (" + ps_report_id + ")", 4)
	Return -1
Else
	luo_report = component_manager.get_component(ls_component_id)
	If Isnull(luo_report) Then
		log.log(po_null, "f_run_report:0119", "Error getting report component (" + &
					ls_component_id + ")", 4)
		Return -1
	End If
End If

ls_report_office_id = f_attribute_find_attribute(pstr_attributes, "office_id")
if isnull(ls_report_office_id) then
	// If there is no office_id specified in the attributes, then look it up.
	// If this service is associated with an encounter, then add the office of the encounter
	// so the report knows which records to get from o_Report_Attributes
	if not isnull(pstr_context.encounter_id) and not isnull(pstr_context.cpr_id) then
		SELECT office_id
		INTO :ls_report_office_id
		FROM p_Patient_Encounter
		WHERE cpr_id = :pstr_context.cpr_id
		AND encounter_id = :pstr_context.encounter_id;
		if not tf_check() then return -1
		if sqlca.sqlcode = 100 then setnull(ls_report_office_id)
	end if
end if

// Get the attributes for this service
lstr_attributes = pstr_attributes

if len(pstr_context.cpr_id) > 0 then
	f_attribute_add_attribute(lstr_attributes, "cpr_id", pstr_context.cpr_id)
end if

// If we found an office, then pass it in to the report component
if not isnull(ls_report_office_id) then
	f_attribute_add_attribute(lstr_attributes, "office_id", ls_report_office_id)
end if

// If we found a printer, then pass it in to the report component
if not isnull(ls_printer) then
	f_attribute_add_attribute(lstr_attributes, "printer", ls_printer)
end if

f_attribute_add_attribute(lstr_attributes, "DESTINATION", ls_destination)

// Inform the report and all of it's called object of which workplan item is triggering this document creation
//f_attribute_add_attribute(lstr_attributes, "document_patient_workplan_item_id", string(patient_workplan_item_id))

// Add some properties of the document to the report attributes
//f_attribute_add_attribute(lstr_attributes, "Document ordered_for", ordered_for)

luo_report.printreport(ps_report_id, lstr_attributes)
if luo_report.printreport_status > 0 then
	if len(luo_report.document_file.attachment) > 0 then
		pstr_document_file = luo_report.document_file
		li_sts = 1
	else
		li_sts = -1
	end if
else
	li_sts = -1
end if

component_manager.destroy_component(luo_report)

if li_sts < 0 then return -1

Return li_sts

end function

