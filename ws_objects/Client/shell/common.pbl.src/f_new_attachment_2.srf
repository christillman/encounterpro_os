$PBExportHeader$f_new_attachment_2.srf
global type f_new_attachment_2 from function_object
end type

forward prototypes
global function long f_new_attachment_2 (string ps_cpr_id, string ps_context_object, long pl_object_key, string ps_progress_type, string ps_progress_key, string ps_extension, string ps_attachment_type, string ps_attachment_tag, string ps_filename, blob pb_attachment, string ps_folder)
end prototypes

global function long f_new_attachment_2 (string ps_cpr_id, string ps_context_object, long pl_object_key, string ps_progress_type, string ps_progress_key, string ps_extension, string ps_attachment_type, string ps_attachment_tag, string ps_filename, blob pb_attachment, string ps_folder);str_external_observation_attachment lstr_attachment
str_attachment lstr_new_attachment
long ll_attachment_id
u_ds_attachments lds_attachments


// Attachment data, extension, and progress_type are required
if isnull(ps_progress_type) or len(ps_progress_type) <= 0 then
	log.log(po_null, "f_new_attachment()", "No progress type", 4)
	return -1
end if

if isnull(ps_extension) or len(ps_extension) <= 0 then
	log.log(po_null, "f_new_attachment()", "No attachment extension", 4)
	return -1
end if

if isnull(pb_attachment) or len(pb_attachment) <= 0 then
	log.log(po_null, "f_new_attachment()", "No attachment data", 4)
	return -1
end if

if trim(ps_progress_key) = "" then
	setnull(ps_progress_key)
end if

if isnull(ps_folder) then
	ps_folder = datalist.get_preference("PREFERENCES", "default_document_folder_" + ps_context_object)
end if

if len(ps_cpr_id) > 0 then
	lstr_new_attachment.cpr_id = ps_cpr_id
else
	setnull(lstr_new_attachment.cpr_id)
end if

// If there isn't a current patient, then we need to create an attachment
// object to handle the attachments
if isnull(current_patient) then
	lds_attachments = CREATE u_ds_attachments
	lds_attachments.settransobject(sqlca)
else
	lds_attachments = current_patient.attachments
	if isnull(lstr_new_attachment.cpr_id) then
		lstr_new_attachment.cpr_id = current_patient.cpr_id
	end if
end if

setnull(lstr_new_attachment.encounter_id)
setnull(lstr_new_attachment.problem_id)
setnull(lstr_new_attachment.treatment_id)
setnull(lstr_new_attachment.observation_sequence)
setnull(lstr_new_attachment.attachment_id)
setnull(lstr_new_attachment.attachment_type)

CHOOSE CASE lower(ps_context_object)
	CASE "patient"
	CASE "encounter"
		lstr_new_attachment.encounter_id = pl_object_key
	CASE "assessment"
		lstr_new_attachment.problem_id = pl_object_key
	CASE "treatment"
		lstr_new_attachment.treatment_id = pl_object_key
	CASE "observation"
		lstr_new_attachment.observation_sequence = pl_object_key
END CHOOSE

lstr_new_attachment.extension = ps_extension

if len(ps_attachment_type) > 0 then
	lstr_new_attachment.attachment_type = ps_attachment_type
else
	lstr_new_attachment.attachment_type = datalist.extension_default_attachment_type(ps_extension)
end if

// If there's a specific comment_title for this attachment then use it.  Otherwise use the progress_key
if len(ps_attachment_tag) > 0 then
	lstr_new_attachment.attachment_tag = ps_attachment_tag
else
	lstr_new_attachment.attachment_tag = ps_progress_key
end if
lstr_new_attachment.attachment_file = ps_filename
lstr_new_attachment.attachment_folder = ps_folder
if not isnull(lstr_attachment.attachment_comment) and (trim(lstr_attachment.attachment_comment) <> "") then
	lstr_new_attachment.attachment_text = trim(lstr_attachment.attachment_comment)
else
	setnull(lstr_new_attachment.attachment_text)
end if

// Now create the attachment
ll_attachment_id = lds_attachments.new_attachment(lstr_new_attachment, pb_attachment, ps_context_object, ps_progress_type, ps_progress_key)
if ll_attachment_id <= 0 then
	log.log(po_null, "results_posted", "Error creating attachment", 4)
	return -1
end if
			
return ll_attachment_id



end function

