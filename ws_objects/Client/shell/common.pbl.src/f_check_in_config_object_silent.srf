$PBExportHeader$f_check_in_config_object_silent.srf
global type f_check_in_config_object_silent from function_object
end type

forward prototypes
global function integer f_check_in_config_object_silent (ref str_config_object_info pstr_config_object, string ps_version_description)
end prototypes

global function integer f_check_in_config_object_silent (ref str_config_object_info pstr_config_object, string ps_version_description);long ll_sts
u_config_object_manager lo_config_object_manager
string ls_config_object_data
blob lbl_objectdata
str_popup popup
str_popup_return popup_return
string ls_object_encoding_method

// Get info about config object type
SELECT object_encoding_method
INTO :ls_object_encoding_method
FROM c_Config_Object_Type
WHERE config_object_type = :pstr_config_object.config_object_type;
if not tf_check() then return -1
if sqlca.sqlnrows = 0 then
	log.log(po_null, "f_check_in_config_object()", "Config object type not valid (" +pstr_config_object.config_object_type + ")", 4)
	return -1
end if


// Checkin the version
setnull(lbl_objectdata)
ll_sts =  sqlca.config_checkin(pstr_config_object.config_object_id, ps_version_description, lbl_objectdata, current_user.user_id)
if not tf_check() then return -1
if ll_sts < 0 then
	log.log(po_null, "f_check_in_config_object()", "Error checking in config object (" + string(ll_sts) + ")", 4)
	return -1
end if


// Get the object data
CHOOSE CASE upper(ls_object_encoding_method)
	CASE "SQL"
		SELECTBLOB dbo.fn_config_image(:pstr_config_object.config_object_id)
		INTO :lbl_objectdata
		FROM c_1_Record;
		if not tf_check() then return -1
	CASE ELSE
		lo_config_object_manager = CREATE u_config_object_manager
		
		ll_sts = lo_config_object_manager.initialize_com()
		if ll_sts <= 0 then
			log.log(po_null, "f_check_in_config_object()", "Error initializing COM object", 4)
			return -1
		end if
		
		TRY
			ls_config_object_data = lo_config_object_manager.GetConfigObjectXml(pstr_config_object.config_object_type, pstr_config_object.config_object_id)
		CATCH (oleruntimeerror lt_error)
			log.log(po_null, "f_check_in_config_object_silent()", "Error calling GetConfigObjectXml ~r~n" + lt_error.text + "~r~n" + lt_error.description, 4)
			UPDATE c_Config_Object_Version
			SET status = 'CheckedOut'
			WHERE config_object_id = :pstr_config_object.config_object_id
			AND version = :pstr_config_object.installed_version;
			if not tf_check() then return -1
			return -1
		END TRY
		
		lo_config_object_manager.disconnectobject()
		DESTROY lo_config_object_manager
		
		if isnull(ls_config_object_data) or len(ls_config_object_data) = 0 then
			setnull(lbl_objectdata)
		else
			lbl_objectdata = blob(ls_config_object_data, EncodingUTF8!)
		end if
END CHOOSE

if isnull(lbl_objectdata) then
	log.log(po_null, "f_check_in_config_object()", "No data returned from GetConfigObjectXml()", 4)
	UPDATE c_Config_Object_Version
	SET status = 'CheckedOut'
	WHERE config_object_id = :pstr_config_object.config_object_id
	AND version = :pstr_config_object.installed_version;
	if not tf_check() then return -1
	return -1
end if


// Update the version
UPDATEBLOB c_Config_Object_Version
SET objectdata = :lbl_objectdata
WHERE config_object_id = :pstr_config_object.config_object_id
AND version = :pstr_config_object.installed_version;
if not tf_check() then return -1
if sqlca.sqlnrows <> 1 then
	log.log(po_null, "f_check_in_config_object()", "Version record not found (" + pstr_config_object.config_object_id + ", " + string(pstr_config_object.installed_version) + ")", 4)
	UPDATE c_Config_Object_Version
	SET status = 'CheckedOut'
	WHERE config_object_id = :pstr_config_object.config_object_id
	AND version = :pstr_config_object.installed_version;
	if not tf_check() then return -1
	return -1
end if

// Refresh the config object structure
ll_sts = f_get_config_object_info(pstr_config_object.config_object_id, pstr_config_object)
if ll_sts <= 0 then
	log.log(po_null, "f_check_in_config_object()", "Error refreshing config object structure", 4)
	return -1
end if

return 1


end function

