$PBExportHeader$f_get_config_object_info.srf
global type f_get_config_object_info from function_object
end type

forward prototypes
global function integer f_get_config_object_info (string ps_config_object_id, ref str_config_object_info pstr_config_object_info)
end prototypes

global function integer f_get_config_object_info (string ps_config_object_id, ref str_config_object_info pstr_config_object_info);integer li_sts
integer li_copyable
long ll_production_version
long ll_beta_version
long ll_testing_version
datetime ldt_production_version_date
datetime ldt_beta_version_date
datetime ldt_testing_version_date
long ll_max_version
long ll_local

pstr_config_object_info = f_empty_config_object_info()

ll_local = 0

SELECT config_object_id,
	config_object_type,
	context_object,
	description,
	long_description,
	config_object_category,
	installed_version,
	installed_version_date,
	installed_version_status,
	latest_version,
	latest_version_date,
	latest_version_status,
	owner_id,
	owner_description,
	created,
	created_by,
	checked_out_by,
	checked_out_date_time,
	checked_out_from_version,
	status,
	copyright_status,
	copyable,
	license_data,
	license_status,
	license_expiration_date,
	1
INTO :pstr_config_object_info.config_object_id,
	:pstr_config_object_info.config_object_type,
	:pstr_config_object_info.context_object,
	:pstr_config_object_info.description,
	:pstr_config_object_info.long_description,
	:pstr_config_object_info.config_object_category,
	:pstr_config_object_info.installed_version,
	:pstr_config_object_info.installed_version_date,
	:pstr_config_object_info.installed_version_status,
	:pstr_config_object_info.latest_version,
	:pstr_config_object_info.latest_version_date,
	:pstr_config_object_info.latest_version_status,
	:pstr_config_object_info.owner_id,
	:pstr_config_object_info.owner_description,
	:pstr_config_object_info.created,
	:pstr_config_object_info.created_by,
	:pstr_config_object_info.checked_out_by,
	:pstr_config_object_info.checked_out_date_time,
	:pstr_config_object_info.checked_out_from_version,
	:pstr_config_object_info.status,
	:pstr_config_object_info.copyright_status,
	:li_copyable,
	:pstr_config_object_info.license_data,
	:pstr_config_object_info.license_status,
	:pstr_config_object_info.license_expiration_date,
	:ll_local
FROM c_Config_Object
WHERE config_object_id = :ps_config_object_id;
if not tf_check() then return -1
if sqlca.sqlnrows = 0 then
	SELECT config_object_id,
		config_object_type,
		context_object,
		description,
		long_description,
		config_object_category,
		production_version,
		production_version_date,
		beta_version,
		beta_version_date,
		testing_version,
		testing_version_date,
		owner_id,
		owner_description,
		created,
		created_by,
		status,
		copyright_status,
		copyable,
		license_data,
		license_status,
		license_expiration_date
	INTO :pstr_config_object_info.config_object_id,
		:pstr_config_object_info.config_object_type,
		:pstr_config_object_info.context_object,
		:pstr_config_object_info.description,
		:pstr_config_object_info.long_description,
		:pstr_config_object_info.config_object_category,
		:ll_production_version,
		:ldt_production_version_date,
		:ll_beta_version,
		:ldt_beta_version_date,
		:ll_testing_version,
		:ldt_testing_version_date,
		:pstr_config_object_info.owner_id,
		:pstr_config_object_info.owner_description,
		:pstr_config_object_info.created,
		:pstr_config_object_info.created_by,
		:pstr_config_object_info.status,
		:pstr_config_object_info.copyright_status,
		:li_copyable,
		:pstr_config_object_info.license_data,
		:pstr_config_object_info.license_status,
		:pstr_config_object_info.license_expiration_date
	FROM c_Config_Object_Library
	WHERE config_object_id = :ps_config_object_id;
	if not tf_check() then return -1
	if sqlca.sqlnrows = 1 then
		ll_max_version = -1
		if ll_production_version > ll_max_version then
			ll_max_version = ll_production_version
			pstr_config_object_info.latest_version = ll_production_version
			pstr_config_object_info.latest_version_date = ldt_production_version_date
		end if
		if ll_beta_version > ll_max_version then
			ll_max_version = ll_beta_version
			pstr_config_object_info.latest_version = ll_beta_version
			pstr_config_object_info.latest_version_date = ldt_beta_version_date
		end if
		if ll_testing_version > ll_max_version then
			ll_max_version = ll_testing_version
			pstr_config_object_info.latest_version = ll_testing_version
			pstr_config_object_info.latest_version_date = ldt_testing_version_date
		end if
	end if
end if

if li_copyable = 0 then
	pstr_config_object_info.copyable = false
else
	pstr_config_object_info.copyable = true
end if

if pstr_config_object_info.owner_id = sqlca.customer_id then
	SELECT max(version)
	INTO :pstr_config_object_info.production_version
	FROM c_Config_Object_Version
	WHERE config_object_id = :ps_config_object_id;
	if not tf_check() then return -1
	
	SELECT release_status_date_time
	INTO :pstr_config_object_info.production_version_date
	FROM c_Config_Object_Version
	WHERE config_object_id = :ps_config_object_id
	AND version = :pstr_config_object_info.production_version;
	if not tf_check() then return -1
else
	SELECT production_version ,
		production_version_date  ,
		beta_version  ,
		beta_version_date  ,
		testing_version  ,
		testing_version_date  
	INTO
		:pstr_config_object_info.production_version,
		:pstr_config_object_info.production_version_date,
		:pstr_config_object_info.beta_version,
		:pstr_config_object_info.beta_version_date,
		:pstr_config_object_info.testing_version,
		:pstr_config_object_info.testing_version_date
	FROM c_Config_Object_Library
	WHERE config_object_id = :ps_config_object_id;
	if not tf_check() then return -1
	if sqlca.sqlnrows = 1 then
		pstr_config_object_info.library_object = true
	else
		SELECT max(version)
		INTO :pstr_config_object_info.production_version
		FROM c_Config_Object_Version
		WHERE config_object_id = :ps_config_object_id
		AND release_status IN ('Shareware', 'Production');
		if not tf_check() then return -1
		
		SELECT release_status_date_time
		INTO :pstr_config_object_info.production_version_date
		FROM c_Config_Object_Version
		WHERE config_object_id = :ps_config_object_id
		AND version = :pstr_config_object_info.production_version;
		if not tf_check() then return -1
		
		SELECT max(version)
		INTO :pstr_config_object_info.beta_version
		FROM c_Config_Object_Version
		WHERE config_object_id = :ps_config_object_id
		AND release_status = 'Beta';
		if not tf_check() then return -1
		
		SELECT release_status_date_time
		INTO :pstr_config_object_info.beta_version_date
		FROM c_Config_Object_Version
		WHERE config_object_id = :ps_config_object_id
		AND version = :pstr_config_object_info.beta_version;
		if not tf_check() then return -1
		
		SELECT max(version)
		INTO :pstr_config_object_info.testing_version
		FROM c_Config_Object_Version
		WHERE config_object_id = :ps_config_object_id
		AND release_status = 'Testing';
		if not tf_check() then return -1
		
		SELECT release_status_date_time
		INTO :pstr_config_object_info.testing_version_date
		FROM c_Config_Object_Version
		WHERE config_object_id = :ps_config_object_id
		AND version = :pstr_config_object_info.testing_version;
		if not tf_check() then return -1
		
		pstr_config_object_info.library_object = false
	end if
end if

SELECT min(version), count(*)
INTO
	:pstr_config_object_info.earliest_version,
	:pstr_config_object_info.version_count
FROM c_Config_Object_Version
WHERE config_object_id = :ps_config_object_id;
if not tf_check() then return -1

if pstr_config_object_info.installed_version >= 0 then
	SELECT release_status
	INTO :pstr_config_object_info.installed_version_release_sts
	FROM c_Config_Object_Version
	WHERE config_object_id = :ps_config_object_id
	AND version = :pstr_config_object_info.installed_version;
	if not tf_check() then return -1
end if

// If there is a local config_object record but no version record then call the checker
if ll_local = 1 and isnull(pstr_config_object_info.earliest_version) then
	li_sts = f_config_object_check_version(pstr_config_object_info)
end if

return 1



end function

