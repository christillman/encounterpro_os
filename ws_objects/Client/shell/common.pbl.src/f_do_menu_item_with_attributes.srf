$PBExportHeader$f_do_menu_item_with_attributes.srf
global type f_do_menu_item_with_attributes from function_object
end type

forward prototypes
global function integer f_do_menu_item_with_attributes (long pl_menu_id, long pl_menu_item_id, str_attributes pstr_attributes)
end prototypes

global function integer f_do_menu_item_with_attributes (long pl_menu_id, long pl_menu_item_id, str_attributes pstr_attributes);u_ds_data luo_attributes
str_attributes lstr_attributes
str_attributes lstr_trt_attributes
string lsa_attributes[]
string lsa_values[]
long ll_count
long i, j
string ls_cpr_id
long ll_encounter_id
u_component_treatment luo_define_treatment
u_component_treatment luo_existing_treatment
long ll_treatment_id
string ls_description
integer li_sts
long ll_null
datetime ldt_null
u_component_service luo_service
long ll_patient_workplan_item_id
str_menu_item lstr_menu_item
integer li_return_status
integer li_step_number
string ls_ordered_for
boolean lb_sticky_logon
long ll_menu_id
string ls_temp
long ll_object_key
boolean lb_past_treatment
string ls_menu_context_object
str_attributes lstr_runtime_attributes

setnull(ll_null)
setnull(ldt_null)

// If we don't have a valid menu_id, we can assume that the descendent class
// will handle the button press
if isnull(pl_menu_id) or isnull(pl_menu_item_id) then return 0

lstr_menu_item = datalist.get_menu_item(pl_menu_id, pl_menu_item_id)
if isnull(lstr_menu_item.menu_item_type) then
	log.log(po_null, "f_do_menu_item()", "Menu Item not found (" + string(pl_menu_id) + ", " + string(pl_menu_item_id) + ")", 4)
	return -1
end if

setnull(ls_cpr_id)
setnull(ll_encounter_id)
setnull(luo_existing_treatment)

ls_menu_context_object = datalist.menu_context_object(pl_menu_id)

if not isnull(current_patient) then
	ls_cpr_id = current_patient.cpr_id
	if isnull(current_service) or not isvalid(current_service) then
		// If there's no current service then there's no treatment context, but get the
		// encounter context from the current_patient object
		setnull(luo_existing_treatment)
	else
		// If we have a current service then inherit the treatment and encounter contexts from it
		ll_encounter_id = current_service.encounter_id
		luo_existing_treatment = current_service.treatment
	end if
	
	// If we still don't have an encounter context, then use the "current_encounter"
	if isnull(ll_encounter_id) and not isnull(current_patient.open_encounter) then
		ll_encounter_id = current_patient.open_encounter.encounter_id
	end if
end if

// Get the attributes for this menu item
luo_attributes = CREATE u_ds_data
luo_attributes.set_dataobject("dw_c_menu_item_attribute")
ll_count = luo_attributes.retrieve(pl_menu_id, pl_menu_item_id)

// Put the configuration attributes in a structure
f_attribute_ds_to_str(luo_attributes, lstr_attributes)

// Get the menu_id from the menu_item_attributes BEFORE adding in the
// passed-in attributes
ls_temp = f_attribute_find_attribute(lstr_attributes, "menu_id")
if isnull(ls_temp) then
	// If no menu_id is found among the attributes, then use the value from the c_Menu_Item record
	ll_menu_id = long(lstr_menu_item.menu_item)
else
	// If we found an attribute, then evaluate the embedded property if necessary
	ll_menu_id = long(f_attribute_value_substitute(ls_menu_context_object, ll_object_key, ls_temp))
end if

// Add the configuration attributes to the passed in attributes
f_attribute_add_attributes(pstr_attributes, lstr_attributes)

// Make sure we have a context_object
ls_temp = f_attribute_find_attribute(pstr_attributes, "context_object")
if isnull(ls_temp) then
	f_attribute_add_attribute(pstr_attributes, "context_object", ls_menu_context_object)
end if


// Get runtime attributes if needed
li_sts = f_get_params_with_state(lstr_menu_item.id, "Runtime", lstr_runtime_attributes, pstr_attributes)
if li_sts < 0 then return -1
if li_sts > 0 then f_attribute_add_attributes(pstr_attributes, lstr_runtime_attributes)

lb_sticky_logon = current_scribe.sticky_logon
current_scribe.sticky_logon = true

li_return_status = 1

CHOOSE CASE lstr_menu_item.menu_item_type
	CASE "ORDERSERVICE"
		// Orders a service for a specified user/role, but does not execute the service immediately
		setnull(li_step_number)
		ls_description = f_attribute_find_attribute(pstr_attributes, "description")
		ls_ordered_for = f_attribute_find_attribute(pstr_attributes, "ordered_for")
		if isnull(ls_ordered_for) then ls_ordered_for = current_user.user_id
		
		li_return_status = service_list.order_service(ls_cpr_id, &
																ll_encounter_id, &
																lstr_menu_item.menu_item, &
																ls_ordered_for, &
																ls_description, &
																li_step_number, &
																pstr_attributes)
	CASE "SERVICE"
		li_return_status = service_list.do_service(ls_cpr_id, &
																ll_encounter_id, &
																lstr_menu_item.menu_item, &
																luo_existing_treatment, &
																pstr_attributes)
	CASE "TREATMENT"
		lb_past_treatment = f_string_to_boolean(f_attribute_find_attribute(pstr_attributes, "past_treatment"))
		setnull(ls_description)
		ll_treatment_id = current_patient.treatments.order_treatment(ls_cpr_id, &
																			ll_encounter_id, &
																			lstr_menu_item.menu_item, &
																			ls_description, &
																			ll_null, &
																			lb_past_treatment, &
																			current_user.user_id, &
																			ll_null, &
																			pstr_attributes)
		if ll_treatment_id <= 0 then return -1
	CASE "TREATMENT_TYPE"
		lb_past_treatment = f_string_to_boolean(f_attribute_find_attribute(pstr_attributes, "past_treatment"))
		luo_define_treatment = f_get_treatment_component(lstr_menu_item.menu_item)
		If Isnull(luo_define_treatment) Then
			log.log(po_null, "f_do_menu_item()", "Unable to get treatment component (" + lstr_menu_item.menu_item + ")", 4)
			li_return_status = -1
		else
			luo_define_treatment.define_treatment()
			for i = 1 to luo_define_treatment.treatment_count
				// Reset the treatment attributes to the current configured attributes
				lstr_trt_attributes = pstr_attributes
				// Then add the attributes from each treatment instance to be ordered
				for j = 1 to luo_define_treatment.treatment_definition[i].attribute_count
					f_attribute_add_attribute(lstr_trt_attributes, &
														luo_define_treatment.treatment_definition[i].attribute[j], &
														luo_define_treatment.treatment_definition[i].value[j])
				next
				
				ll_treatment_id = current_patient.treatments.order_treatment(ls_cpr_id, &
																								ll_encounter_id, &
																								lstr_menu_item.menu_item, &
																								luo_define_treatment.treatment_definition[i].item_description, &
																								ll_null, &
																								lb_past_treatment, &
																								current_user.user_id, &
																								ll_null, &
																								lstr_trt_attributes)
				if ll_treatment_id <= 0 then
					li_sts = -1
					exit
				end if
			next
			li_return_status = li_sts
		end if
	CASE "TREATMENT_LIST"
		li_return_status = f_order_treatment_list(lstr_menu_item.menu_item)
	CASE "MENU"
		setnull(ll_object_key)
		li_return_status = f_display_menu_with_attributes(ll_menu_id, true, pstr_attributes)
	CASE ELSE
		log.log(po_null, "button_pressed", "Unknown button_action (" + lstr_menu_item.menu_item_type + ")", 3)
		li_return_status = -1
END CHOOSE

DESTROY luo_attributes

current_scribe.sticky_logon = lb_sticky_logon

return li_return_status

end function

