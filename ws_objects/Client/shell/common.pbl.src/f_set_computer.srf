$PBExportHeader$f_set_computer.srf
global type f_set_computer from function_object
end type

forward prototypes
global function integer f_set_computer ()
end prototypes

global function integer f_set_computer ();integer li_sts
string ls_allow_new_computer
string ls_status
string ls_temp
string ls_computer_office_id
str_popup popup
str_popup_return popup_return
boolean lb_computer_not_found
string ls_null
long ll_null

 DECLARE lsp_register_computer PROCEDURE FOR dbo.sp_register_computer  
 			@ps_office_id = :office_id,
         @ps_logon_id = :windows_logon_id,   
         @ps_computername = :computername,   
         @pl_computer_id = :computer_id OUT ;


setnull(ls_null)
setnull(ll_null)

// Get the computername
computername = upper(log.get_computername())

// Get the windows logon_id
windows_logon_id = upper(log.get_userid())


// First, see if an office_id is specified
office_id = profilestring(ini_file, common_thread.default_database, "office_id", "")
if trim(office_id) = "" then setnull(office_id)

// Then, determine the computer_id and default office_id
SELECT	o_Computers.computer_id,
			c_Office.office_id,
			o_Computers.status
INTO :computer_id,
		:ls_computer_office_id,
		:ls_status
FROM o_Computers
	LEFT OUTER JOIN c_Office
	ON o_Computers.office_id = c_Office.office_id
WHERE upper(computername) = :computername
AND logon_id = :windows_logon_id;
if not sqlca.check() then return -1
if sqlca.sqlcode = 100 then
	lb_computer_not_found = true
else
	if ls_status <> "OK" then
		log.log(this, "f_set_computer()", "Computer is disabled", 5)
		HALT CLOSE
	end if
	lb_computer_not_found = false
end if


// If no office_id is specified in the registry then use the default for the computer/logon combo
if trim(office_id) = "" or isnull(office_id) then
	office_id = ls_computer_office_id
end if

// If we still don't have an office_id, then use the min office_id from c_Office
if trim(office_id) = "" or isnull(office_id) then
	if cpr_mode = "CLIENT" then
		// If we're in client mode then just ask the user which office to use
		popup.dataobject = "dw_office_pick"
		popup.datacolumn = 1
		popup.displaycolumn = 2
		popup.auto_singleton = true
		openwithparm(w_pop_pick, popup)
		popup_return = message.powerobjectparm
		if popup_return.item_count <> 1 then return -1
		
		office_id = popup_return.items[1]
	else
		// If we're not in client mode then get the min office_id
		SELECT min(office_id)
		INTO :office_id
		FROM c_Office
		WHERE status = 'OK';
		if not sqlca.check() then return -1
		if sqlca.sqlcode = 100 or isnull(office_id) then
			log.log(this, "f_initialize_objects()", "Unable to determine office_id", 4)
			return -1
		end if
	end if
end if

if lb_computer_not_found then
	// If we didn't find a computer record, create one.
//	ls_allow_new_computer = upper(datalist.get_preference("SYSTEM", "AllowNewComputer"))
	ls_allow_new_computer = sqlca.fn_get_preference("SYSTEM", "AllowNewComputer", ls_null, ll_null)
	if isnull(ls_allow_new_computer) or ls_allow_new_computer <> "N" then
		EXECUTE lsp_register_computer;
		if not sqlca.check() then return -1
		
		FETCH lsp_register_computer INTO :computer_id;
		if not sqlca.check() then return -1
		
		CLOSE lsp_register_computer;
	else
		log.log(this, "f_set_computer()", "Computer is not registered and new computeres are not allowed", 5)
		HALT CLOSE
	end if
end if

// Force office_id uppercase
office_id = upper(office_id)

if office_id <> ls_computer_office_id or isnull(ls_computer_office_id) then
	UPDATE o_Computers
	SET office_id = :office_id
	WHERE computer_id = :computer_id;
	if not tf_check() then return -1
end if

// Get the global variables
SELECT description
INTO :office_description
FROM c_Office
WHERE office_id = :office_id;
if not sqlca.check() then return -1
if sqlca.sqlcode <> 0 then
	log.log(this, "f_initialize_objects()", "Invalid office_id (" + office_id + ")", 5)
	return -1
end if

if cpr_mode <> "DBMAINT" then
	li_sts = f_set_printers()
end if

return 1


end function

