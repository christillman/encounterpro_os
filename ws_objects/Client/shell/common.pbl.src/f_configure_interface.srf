$PBExportHeader$f_configure_interface.srf
global type f_configure_interface from function_object
end type

forward prototypes
global function integer f_configure_interface (long pl_interfaceserviceid)
end prototypes

global function integer f_configure_interface (long pl_interfaceserviceid);str_popup popup
str_popup_return popup_return
str_params lstr_params
str_attributes lstr_attributes
string ls_value
integer li_sts
long ll_attribute_count
long i
string ls_interfaceservicetype
string ls_commcomponent
string ls_transportdescription
string ls_documenttype
long ll_count
string ls_interfacedescription
string ls_purpose
string ls_document_route
string ls_document_route_suffix
string ls_original_document_route
string ls_original_document_route_suffix
string ls_new_document_route
string ls_document_format
string ls_send_from
string ls_direction
u_ds_data luo_data
string ls_receive_flag
string ls_send_flag
string ls_interface_id
long ll_interface_owner_id
string ls_description

if isnull(pl_interfaceserviceid) then
	// if the interface service id is null then this is a new local interface
	return f_configure_local_interface(pl_interfaceserviceid)
end if

// Get some info about the interface
SELECT description, interfaceservicetype, document_route, receive_flag, send_flag, owner_id, CAST(id AS varchar(40))
INTO :ls_interfacedescription, :ls_interfaceservicetype, :ls_document_route, :ls_receive_flag, :ls_send_flag, :ll_interface_owner_id, :ls_interface_id
FROM c_component_interface
WHERE interfaceserviceid = :pl_interfaceserviceid;
if not tf_check() then return -1
if sqlca.sqlnrows = 0 then
	log.log(this, "new_interface_transport()", "interface service id not found (" + string(pl_interfaceserviceid) + ")", 4)
	return -1
end if

if ll_interface_owner_id = sqlca.customer_id then
	// If this is a local interface then use the f_configure_local_interface() function instead of this one
	return f_configure_local_interface(pl_interfaceserviceid)
end if

// Get the existing attributes for this transport
luo_data = CREATE u_ds_data
luo_data.set_dataobject("dw_practice_interface_transport_properties")
ll_count = luo_data.retrieve(sqlca.customer_id, pl_interfaceserviceid, 0)
if ll_count < 0 then return -1

f_attribute_ds_to_str(luo_data, lstr_attributes)

li_sts = f_get_params(ls_interface_id, "Config", lstr_attributes)
if li_sts < 0 then return -1
if li_sts = 0 then
	openwithparm(w_pop_message, "This interface has no configuration options")
	DESTROY luo_data
	return 0
end if

// Save the attributes in the properties table
f_attribute_str_to_ds_with_removal(lstr_attributes, luo_data)

for i = 1 to luo_data.rowcount()
	if isnull(luo_data.object.subscriber_owner_id[i]) then
		luo_data.object.subscriber_owner_id[i] = sqlca.customer_id
		luo_data.object.interfaceserviceid[i] = pl_interfaceserviceid
		luo_data.object.transportsequence[i] = 0
		luo_data.object.property[i] = luo_data.object.attribute[i]
		luo_data.object.last_updated[i] = datetime(today(), now())
	end if
next

li_sts = luo_data.update()

DESTROY luo_data

return 1



end function

