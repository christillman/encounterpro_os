$PBExportHeader$f_sort_assessments.srf
global type f_sort_assessments from function_object
end type

forward prototypes
global function integer f_sort_assessments (long pl_assessment_count, ref str_assessment_description lstra_assessments[], string ps_sort_column, string ps_sort_direction)
end prototypes

global function integer f_sort_assessments (long pl_assessment_count, ref str_assessment_description lstra_assessments[], string ps_sort_column, string ps_sort_direction);str_assessment_description lstr_temp_trt
boolean lb_less
boolean lb_ascending
long i, j

if lower(left(ps_sort_direction, 1)) = "d" then
	lb_ascending = false
else
	lb_ascending = true
end if

for i = pl_assessment_count to 1 step -1
	for j = 1 to i - 1
		lb_less = false
		
		CHOOSE CASE lower(ps_sort_column)
			CASE "assessment"
				if lstra_assessments[i].assessment < lstra_assessments[j].assessment then lb_less = true
			CASE "begin_date"
				if lstra_assessments[i].begin_date < lstra_assessments[j].begin_date then lb_less = true
			CASE ELSE
				// we don't recognize the column so abort
				return 0
		END CHOOSE
		
		
		if lb_less then
			// If the ith assessment is less than the jth assessment, then swap them
			lstr_temp_trt = lstra_assessments[i]
			lstra_assessments[i] = lstra_assessments[j]
			lstra_assessments[j] = lstr_temp_trt
		end if
	next
next

// If we're not ascending, the reverse the order
if not lb_ascending then
	for i = 1 to int(pl_assessment_count / 2)
		lstr_temp_trt = lstra_assessments[i]
		lstra_assessments[i] = lstra_assessments[pl_assessment_count - i + 1]
		lstra_assessments[pl_assessment_count - i + 1] = lstr_temp_trt
	next
end if

return 1




end function

