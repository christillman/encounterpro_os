$PBExportHeader$f_blob_to_string.srf
global type f_blob_to_string from function_object
end type

forward prototypes
global function string f_blob_to_string (blob pbl_blob)
end prototypes

global function string f_blob_to_string (blob pbl_blob);unsignedlong i1, i2
string ls_string
boolean lb_found
long ll_bloblength
integer li_sts
byte lby_1
byte lby_2
byte lby_3
byte lby_4
byte lby_5
byte lby_6
unsignedlong lul_char

// First try to determine what encoding system is used

if isnull(pbl_blob) then
	setnull(ls_string)
	return ls_string
end if

ll_bloblength = len(pbl_blob)
if ll_bloblength <= 0 then return ""

li_sts = getbyte(pbl_blob, 1, lby_1)
li_sts = getbyte(pbl_blob, 2, lby_2)
li_sts = getbyte(pbl_blob, 3, lby_3)
li_sts = getbyte(pbl_blob, 4, lby_4)
li_sts = getbyte(pbl_blob, 5, lby_5)
li_sts = getbyte(pbl_blob, 6, lby_6)

i1 = lby_1 * 256 + lby_2
i2 = lby_3 * 256 + lby_4

lb_found = false

if i1 = 0 then
// EncodingUTF32BE! not supported yet
//	if i2 = 65279 then
//		ls_string = string(pbl_blob, EncodingUTF32BE!)
//		lb_found = true
//	end if
elseif i1 = 65534 then
	if i2 = 0 then
//		ls_string = string(pbl_blob, EncodingUTF32BE!)
//		lb_found = true
	else
		ls_string = string(pbl_blob, EncodingUTF16LE!)
		lb_found = true
	end if
elseif i1 = 65279 then
	ls_string = string(pbl_blob, EncodingUTF16BE!)
	lb_found = true
elseif i1 = 61371 then
	ls_string = string(pbl_blob, EncodingUTF8!)
	lb_found = true
end if

// If we didn't find a byte-order mark then see if we can guess about unicode vs non-unicode
if not lb_found then
	// if the third byte or fifth byte are zero then assume unicode Big Endian
	// if the fourth byte or sixth byte are zero then assume unicode Little Endian
	if lby_3 = 0 or lby_5 = 0 then
		ls_string = string(pbl_blob, EncodingUTF16BE! )
		lb_found = true
	elseif lby_4 = 0 or lby_6 = 0 then
		ls_string = string(pbl_blob, EncodingUTF16LE! )
		lb_found = true
	else
		ls_string = string(pbl_blob, EncodingUTF8!)
		lb_found = true
	end if
end if

// Finally, check to see if the Byte Order Mark is still present as the first character.  If so then remove it.
lul_char = asc(left(ls_string, 1))
if lul_char = 65279 or lul_char = 65534 then
	ls_string = mid(ls_string, 2)
end if

return ls_string


end function

