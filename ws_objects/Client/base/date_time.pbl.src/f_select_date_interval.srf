$PBExportHeader$f_select_date_interval.srf
global type f_select_date_interval from function_object
end type

forward prototypes
global function string f_select_date_interval (ref date pd_date, string ps_title, date pd_from_date, string ps_interval_type)
end prototypes

global function string f_select_date_interval (ref date pd_date, string ps_title, date pd_from_date, string ps_interval_type);str_popup popup
str_popup_return popup_return
date ld_onset_date
real lr_onset_amount
string ls_onset_unit
integer li_sts
string ls_text
string ls_null
w_pop_time_interval lw_window
string ls_onset_amount
string ls_pref
string ls_default_duration

setnull(ls_null)
ls_default_duration = "1 Day"

if isnull(pd_from_date) then
	// If no from date is passed in, then see if there is a preference for default
	// interval for this interval title.
	ls_pref = datalist.get_preference( "PREFERENCES", "Default Interval - " + ps_title, ls_default_duration)
	f_split_string(ls_pref, " ", ls_onset_amount, ls_onset_unit)
	if isnumber(ls_onset_amount) and unit_list.is_unit(ls_onset_unit) then
		lr_onset_amount = real(ls_onset_amount)
	else
		f_split_string(ls_default_duration, " ", ls_onset_amount, ls_onset_unit)
		lr_onset_amount = real(ls_onset_amount)
	end if
else
	// Convert the pd_date into an interval
	f_pretty_date_interval(pd_date, pd_from_date, lr_onset_amount, ls_onset_unit)
end if

// Prompt the user for an interval
popup.title = ps_title
popup.data_row_count = 2
popup.items[1] = string(lr_onset_amount)
popup.items[2] = ls_onset_unit
openwithparm(lw_window, popup, "w_pop_time_interval", f_active_window())
popup_return = message.powerobjectparm
if popup_return.item_count <> 2 then return ls_null

lr_onset_amount = real(popup_return.items[1])
ls_onset_unit = popup_return.items[2]

// Display the new interval

// Convert the interval back into a date
if isnull(lr_onset_amount) or isnull(ls_onset_unit) then
	pd_date = pd_from_date
	ls_text = ""
else
	ls_text = f_pretty_amount_unit(lr_onset_amount, ls_onset_unit)
	if ps_interval_type = "ONSET" then
		ls_text += " Ago"
		ld_onset_date = f_add_interval(pd_from_date, -int(lr_onset_amount), ls_onset_unit)
	else
		ld_onset_date = f_add_interval(pd_from_date, int(lr_onset_amount), ls_onset_unit)
	end if
	pd_date = ld_onset_date
end if

return ls_text


end function

