$PBExportHeader$f_save_graph_to_file.srf
global type f_save_graph_to_file from function_object
end type

forward prototypes
global function integer f_save_graph_to_file (graph puo_graph)
global function integer f_save_graph_to_file (graph puo_graph, long pl_width, long pl_height, string ps_file_type, ref string ps_filepath)
end prototypes

global function integer f_save_graph_to_file (graph puo_graph);long ll_printjob
string ls_temp
string ls_printer
long ll_width
long ll_height
double ld_aspect_ratio
long ll_backcolor
borderstyle le_borderstyle

ls_printer = common_thread.select_printer()
// If the user didn't select a printer then don't do anything
if isnull(ls_printer) then return 0

common_thread.set_printer(ls_printer)

ls_temp = gnv_app.product_name + " Graph"
ll_printjob = printopen(ls_temp, false)
if ll_printjob < 0 then
	log.log(po_null, "f_save_graph_to_file:0019", "Error opening print job (" + ls_temp + ")", 4)
	return -1
end if
	
PrintDefineFont(ll_printjob, 1, "ARIAL", -12, 400, Default!, AnyFont!, false, false)
printtext(ll_printjob, puo_graph.title, 400, 500, 1)

// Preserve the aspect ratio but print as wide as possible
ll_width = 7500
ld_aspect_ratio = double(puo_graph.width) / double(puo_graph.height)
ll_height = ll_width / ld_aspect_ratio

ll_backcolor = puo_graph.backcolor
puo_graph.backcolor = color_white
le_borderstyle = puo_graph.borderstyle
puo_graph.borderstyle = StyleBox!
puo_graph.print(ll_printjob, 400, 1000 , ll_width, ll_height)
puo_graph.backcolor = ll_backcolor
puo_graph.borderstyle = le_borderstyle

printclose(ll_printjob)

// Reset the default printer
common_thread.set_default_printer()

return 1

end function

global function integer f_save_graph_to_file (graph puo_graph, long pl_width, long pl_height, string ps_file_type, ref string ps_filepath);long ll_printjob
string ls_temp
string ls_printer
long ll_width_pbunits
long ll_height_pbunits
double ld_current_aspect_ratio
double ld_desired_aspect_ratio
long ll_backcolor
borderstyle le_borderstyle
integer li_sts
saveastype le_saveastype
long ll_graph_width
long ll_graph_height
boolean lb_resized

ld_current_aspect_ratio = double(puo_graph.width) / double(puo_graph.height)
le_borderstyle = puo_graph.borderstyle
puo_graph.borderstyle = StyleBox!
ll_graph_width = puo_graph.width
ll_graph_height = puo_graph.height
lb_resized = false

//////////////////////////////////////////////////////////////////////////////////////////////////
// Determine the output file
//////////////////////////////////////////////////////////////////////////////////////////////////
if isnull(ps_filepath) or trim(ps_filepath) = "" then
	ps_filepath = f_temp_file(ps_file_type)
end if

//////////////////////////////////////////////////////////////////////////////////////////////////
// Determine the saving method
//////////////////////////////////////////////////////////////////////////////////////////////////
CHOOSE CASE ps_file_type
	CASE "xls"
		le_saveastype = Excel8!
	CASE "html"
		le_saveastype = HTMLTable!
	CASE "pdf"
		le_saveastype = PSReport!
	CASE "psr"
		le_saveastype = XML!
	CASE "xsflo"
		le_saveastype = XSLFO!
	CASE "emf"
		setnull(le_saveastype)
	CASE "bmp"
		setnull(le_saveastype)
	CASE "jpg"
		setnull(le_saveastype)
	CASE "gif"
		setnull(le_saveastype)
	CASE "png"
		setnull(le_saveastype)
	CASE "wmf"
		setnull(le_saveastype)
	CASE "tif"
		setnull(le_saveastype)
	CASE ELSE
END CHOOSE

//////////////////////////////////////////////////////////////////////////////////////////////////
// Before saving the bitmap to a file see if we can size it correctly
//////////////////////////////////////////////////////////////////////////////////////////////////

if pl_height > 100 AND pl_width > 100 then
	ld_desired_aspect_ratio = double(pl_width) / double(pl_height)
	f_convert_inches_to_pbunits(pl_width, pl_height, ll_width_pbunits, ll_height_pbunits)
	
	// If either the width or the height is larger than the current height then make the control al large as possible preserving the desired aspect ratio
// Commented out because it appears that the resized control will copy to the clipboard OK even if it exceeds the visible area
//	if ll_width_pbunits > ll_graph_width or ll_height_pbunits > ll_graph_height then
//		if ld_desired_aspect_ratio > ld_current_aspect_ratio then
//			// The current width is the limiting dimension
//			ll_width_pbunits = ll_graph_width
//			ll_height_pbunits = ll_width_pbunits / ld_desired_aspect_ratio
//		else
//			// The current height is the limiting dimension
//			ll_height_pbunits = ll_graph_height
//			ll_width_pbunits = ll_height_pbunits* ld_desired_aspect_ratio
//		end if
//	end if
	puo_graph.resize(ll_width_pbunits, ll_height_pbunits)
	yield() // Give the graph a chance to repaint with the new size
	lb_resized = true
end if


//////////////////////////////////////////////////////////////////////////////////////////////////
// Save the graph to the file
//////////////////////////////////////////////////////////////////////////////////////////////////

if isnull(le_saveastype) then
	puo_graph.clipboard()
	
	if common_thread.utilities_ok() then
		li_sts = common_thread.eprolibnet4.of_SaveClipboardToFile(ps_filepath)
		if li_sts <= 0 then
			log.log(po_null, "f_save_graph_to_file:0097", "Error converting graph image to file", 4)
			setnull(ps_filepath)
		end if
	else
		log.log(po_null, "f_save_graph_to_file:0192", "Graph image not saved (Utilities not available)", 3)
		setnull(ps_filepath)
	end if
else
	li_sts = puo_graph.SaveAs(ps_filepath, le_saveastype, true)
	if li_sts <= 0 then
		log.log(po_null, "f_save_graph_to_file:0103", "Error saving graph image to file", 4)
		setnull(ps_filepath)
	end if
end if



puo_graph.borderstyle = le_borderstyle

if lb_resized then
	puo_graph.resize(ll_graph_width, ll_graph_height)
end if


return 1

end function

