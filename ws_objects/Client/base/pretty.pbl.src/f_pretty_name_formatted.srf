$PBExportHeader$f_pretty_name_formatted.srf
global type f_pretty_name_formatted from function_object
end type

forward prototypes
global function string f_pretty_name_formatted (string ps_last_name, string ps_first_name, string ps_middle_name, string ps_name_suffix, string ps_name_prefix, string ps_degree)
global function string f_pretty_name_formatted (string ps_first_name, string ps_middle_name, string ps_last_name, string ps_nickname, string ps_name_suffix, string ps_name_prefix, string ps_degree, string ps_name_format)
end prototypes

global function string f_pretty_name_formatted (string ps_last_name, string ps_first_name, string ps_middle_name, string ps_name_suffix, string ps_name_prefix, string ps_degree);string ls_name

if not isnull(ps_name_prefix) then
	ls_name = ps_name_prefix + " "
else
	ls_name = ""
end if

if len(ps_first_name) > 0 then
	if ls_name <> "" then ls_name += " "
	ls_name += ps_first_name
end if

if len(ps_middle_name) > 0 then
	if ls_name <> "" then ls_name += " "
	ls_name += left(ps_middle_name, 1) + "."
end if

if len(ps_last_name) > 0 then
	if ls_name <> "" then ls_name += " "
	ls_name += ps_last_name
end if

if len(ps_name_suffix) > 0 then
	if ls_name <> "" then ls_name += " "
	ls_name += ps_name_suffix
end if

if len(ps_degree) > 0 then
	ls_name = ls_name + ", " + ps_degree
end if


return ls_name
end function

global function string f_pretty_name_formatted (string ps_first_name, string ps_middle_name, string ps_last_name, string ps_nickname, string ps_name_suffix, string ps_name_prefix, string ps_degree, string ps_name_format);string ls_patient_full_name
long ll_index
long ll_next_token_start
long ll_next_token_end
string ls_token_contents
long ll_keyword_index
string lsa_keywords[] = {"Prefix", "First", "Middle", "Last", "Nickname", "Suffix", "Degree", "F", "M", "L"}
string lsa_values[]
long i

lsa_values[1] = ps_name_prefix
lsa_values[2] = ps_first_name
lsa_values[3] = ps_middle_name
lsa_values[4] = ps_last_name
lsa_values[5] = ps_nickname
lsa_values[6] = ps_name_suffix
lsa_values[7] = ps_degree
lsa_values[8] = left(ps_first_name, 1)
lsa_values[9] = left(ps_middle_name, 1)
lsa_values[10] = left(ps_last_name, 1)

CHOOSE CASE upper(ps_name_format)
	CASE "FULL"
		ps_name_format = common_thread.name_format_full
	CASE "LIST"
		ps_name_format = common_thread.name_format_list
	CASE ELSE
		IF isnull(ps_name_format) OR trim(ps_name_format) = "" OR pos(ps_name_format, "{") = 0 then
			ps_name_format = common_thread.name_format_full
		end if
END CHOOSE


ll_index = 1
ls_patient_full_name = ''

DO WHILE true
	ll_next_token_start = POS(ps_name_format, '{', ll_index)

	IF isnull(ll_next_token_start) then
		exit
	end if

	IF ll_next_token_start = 0 then
		// No more tokens so append the rest of the format string and exit
		ls_patient_full_name = ls_patient_full_name + MID(ps_name_format, ll_index, LEN(ps_name_format) - ll_index + 1)
		exit
	end if

	ll_next_token_end = POS(ps_name_format, '}', ll_next_token_start + 1)


	IF isnull(ll_next_token_end) then
		exit
	end if

	IF ll_next_token_end = 0 then
		// No more tokens so append the rest of the format string and exit
		ls_patient_full_name = ls_patient_full_name + MID(ps_name_format, ll_index, LEN(ps_name_format) - ll_index + 1)
		exit
	end if
	
	// Append any characters between the tokens
	IF ll_next_token_start > ll_index then
		ls_patient_full_name = ls_patient_full_name + MID(ps_name_format, ll_index, ll_next_token_start - ll_index)
	end if

	ll_index = ll_next_token_end + 1

	ls_token_contents = MID(ps_name_format, ll_next_token_start + 1, ll_next_token_end - ll_next_token_start - 1)

	ll_keyword_index = 0

	// Determine which keyword is in the token and substitute the appropriate value
	for i = 1 to upperbound(lsa_keywords)
		ll_keyword_index = POS(ls_token_contents, lsa_keywords[i])
		IF ll_keyword_index > 0 then
			if LEN(lsa_values[i]) > 0 then
				ls_patient_full_name = ls_patient_full_name + REPLACE(ls_token_contents, ll_keyword_index, len(lsa_keywords[i]), lsa_values[i])
			end if
			exit
		end if
	next

	IF ll_index > LEN(ps_name_format) then
		exit
	end if
		
LOOP

return ls_patient_full_name


end function

