$PBExportHeader$f_check_version.srf
global type f_check_version from function_object
end type

forward prototypes
global function integer f_check_version ()
end prototypes

global function integer f_check_version ();str_service_info lstr_service
str_popup popup
integer li_choice
string ls_temp
integer li_sts, i
str_popup_return popup_return
string ls_epro_setup_dir
string ls_epro_setup_prog
u_ds_data luo_components
string ls_component
long ll_count
string ls_myversion
string ls_mybuild
string ls_newversion
string ls_sqlversion
string ls_message, ls_return
boolean lb_sts
string ls_mdlvl_filename
string ls_download_link, ls_errormsg
string ls_cmd

n_runandwait iRun


ExtractorObject lnv_extractor
Integer li_return
string ls_source, ls_target, ls_expectedfile

f_check_attachment_location()
ls_epro_setup_dir = f_default_attachment_path() + "\Install\"
ls_epro_setup_prog = "\Setup.exe /V~"INSTALLDIR=\~""
ls_epro_setup_prog += gnv_app.program_directory + "\~""

ls_sqlversion = string(sqlca.db_script_major_release) + "." + sqlca.db_script_database_version

ls_myversion = string(gnv_app.major_release) + "." + gnv_app.database_version
ls_mybuild = ls_myversion + "." + gnv_app.build

// With Azure, we will be upgradinig the database independently first, then the clients will need to automatically install the new client version.
if gnv_app.target_modification_level < sqlca.modification_level then
	openwithparm(w_pop_message, "The GreenOlive EHR database has been upgraded. Your new application version is being downloaded.")
	
	if sqlca.logid = "demo1" OR (Pos(gnv_app.program_directory,"Demo") > 0 &
			OR Pos(gnv_app.program_filename,"Demo") > 0 OR Pos(sqlca.client_link,"Demo") > 0) then
		ls_expectedfile = "GreenOlive_EHR_Demo_Install_" + string(sqlca.modification_level) + ".exe"
		ls_expectedfile = "GreenOlive_EHR_Azure_Demo_Install_" + string(sqlca.modification_level) + ".exe"
	else		
		ls_expectedfile = "GreenOlive_EHR_Install_" + string(sqlca.modification_level) + ".exe"
	end if
	
	ls_target = "C:\Users\Public\Downloads\" + ls_expectedfile
	if NOT FileExists(ls_target) then
		ls_download_link = sqlca.client_link // "https://github.com/christillman/encounterpro_os/releases/download/v223/GreenOlive_EHR_Azure_Demo_Install_223.exe"
		// tried to use WebView2, but then Windows falsely flags my downloads as having a virus. 
		// and quarantines them. With Powershell, no questions are asked; it just works.
		// ProgressPreference setting prevents byte-by-byte setting of progress display, which increases the download time from 10 seconds to 4 minutes
		ls_cmd = "$ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri " + ls_download_link + " -OutFile " + ls_target
		ls_cmd = 'powershell.exe -NonInteractive -Command "' + ls_cmd + '"'
		If iRun.RunAndWait(ls_cmd, iRun.SW_SHOWMINIMIZED) Then
			sleep(1) // a chance for the file to settle
			if Pos(ls_download_link,".7z") > 0 then
				ls_source = common_thread.windows_userprofile + "\Downloads\" + ls_expectedfile + ".7z"
				lnv_extractor = Create ExtractorObject
				li_return = lnv_extractor.extract (ls_source, ls_target)
				if li_return <> 1 then
					openwithparm(w_pop_message, "The extraction of " + ls_expectedfile + " resulted in error code " + string(li_return) + ". Please request assistance from your GreenOlive representative.")
					return -1
				end if
			end if
		Else
			ls_errormsg = iRun.LastErrorText
			openwithparm(w_pop_message, "The download of " + ls_expectedfile + " was not completed. Please try again soon.")
		End If
	End if
	
	// downloaded just now, or previously
	if FileExists(ls_target) then
		openwithparm(w_pop_message, "GreenOlive EHR will quit now, and the new version will be installed. Afterwards, please start GreenOlive EHR again to use the new version.")
		li_sts = Run(ls_target)
		If li_sts <> 1 Then
			openwithparm(w_pop_message, "The installation of " + ls_expectedfile + " was not completed. Please request assistance from your GreenOlive representative.")
		End If
		return -1 // quit and restart
	else 
		openwithparm(w_pop_message, "The download was not completed. Please try again soon.")
		return -1
	end if

end if


// First see if we're compatible with the database, because we can't run if we're not
if real(ls_sqlversion) < real(gnv_app.my_sql_version) then
	if gnv_app.cpr_mode = "CLIENT" then
		
		ls_newversion = profilestring(ls_epro_setup_dir + "EncounterPRO\Setup.ini", "Startup", "ProductVersion", "")
		ls_message = "This " + gnv_app.product_name + " application (" + ls_myversion + ")"
		ls_message += " does not match the database version (" + ls_sqlversion + ")"
		if left(ls_newversion, len(ls_myversion)) = ls_myversion then
			ls_message += ".  A " + gnv_app.product_name + " installation program is available which matches the database version."
			ls_message += "  Click OK to install version " + ls_newversion + " of " + gnv_app.product_name + "."
			li_sts = messagebox("Version Mismatch", ls_message, StopSign!, OKCancel!, 1)
			if li_sts = 1 then
				li_sts = Run(ls_epro_setup_dir + "EncounterPRO" + ls_epro_setup_prog, Normal!)
				Yield()
			end if
		else
			ls_message += " and the correct " + gnv_app.product_name + " installation program does not appear to be available."
			ls_message += "  Please contact your system administrator."
			openwithparm(w_pop_message, ls_message)
			return -1
		end if
	else
		log.log(po_null, "f_check_version:0072", "Database Version Mismatch (" + gnv_app.database_version + ", " + string(sqlca.db_script_database_version) + ")", 5)
	end if
	return -1
end if	

CHOOSE CASE gnv_app.cpr_mode
	CASE "CLIENT"
		// Make sure we have the necessary modification level
		// log.log(po_null, "f_check_version:0080", "DB " + string(sqlca.modification_level) + ", App " + string(target_modification_level), 3)
		if sqlca.modification_level < gnv_app.target_modification_level then
			ls_message = "This version of " + gnv_app.product_name + " (" + f_app_version() + ")"
			ls_message += " requires the database to be at modification level " + string(gnv_app.target_modification_level)
			ls_message += " or higher.  This database is only at modification level " + string(sqlca.modification_level)
			ls_message += "."
			
			if sqlca.is_dbo_user then
				if sqlca.upgrade_material_id(ls_mdlvl_filename) > 0 then
					ls_message += "~r~n~r~nThe upgrade material (" + ls_mdlvl_filename
					ls_message += ".mdlvl file) has already been located, so you can use the Upgrade Now button to configure the database."
				else
					ls_message += "~r~n~r~nThe upgrade (.mdlvl file) for Mod Level " + string(sqlca.modification_level + 1)
					ls_message += " has not been located, so you will need to use the Load Schema File button before upgrading."
				end if
				log.log(po_null, "f_check_version:0095", ls_message, 2)
				ls_message += " Do you wish to configure the database now?"
				openwithparm(w_pop_yes_no, ls_message)
				popup_return = message.powerobjectparm
				if popup_return.item = "YES" then
					open(w_svc_config_database)
				end if
			else
				ls_message += ".  You must be an administrator to configure the database."
				openwithparm(w_pop_message, ls_message)
			end if
			
			return -1
		end if
	CASE "SERVER"
		if sqlca.modification_level < gnv_app.target_modification_level then
			ls_message = "This version of " + gnv_app.product_name + " (" + f_app_version() + ")"
			ls_message += " requires the database to be at modification level " + string(gnv_app.target_modification_level)
			ls_message += " or higher.  This database is only at modification level " + string(sqlca.modification_level)
			ls_message += ".  Please contact your system administrator or JMJ Technical Support for assistance."
			log.log(po_null, "f_check_version:0116", ls_message, 5)
			// gnv_app.event close()
			return -1
		end if
	CASE ELSE
END CHOOSE


return 1
end function

