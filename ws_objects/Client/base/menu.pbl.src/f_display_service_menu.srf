$PBExportHeader$f_display_service_menu.srf
global type f_display_service_menu from function_object
end type

forward prototypes
global function integer f_display_service_menu (long pl_patient_workplan_item_id)
end prototypes

global function integer f_display_service_menu (long pl_patient_workplan_item_id);str_popup popup
str_popup_return popup_return
integer button_pressed
integer li_sts
window lw_pop_buttons
integer i
string lsa_button[]
string ls_status
string ls_ordered_for
string ls_owned_by
datetime ldt_progress_date_time
string ls_active_service_flag
boolean lb_active_service
u_user luo_user
long ll_patient_workplan_id
string ls_cpr_id
long ll_encounter_id
long ll_encounter_patient_workplan_id
str_p_patient_wp lstr_p_patient_wp
w_window_base lw_window
str_context lstr_context

setnull(ldt_progress_date_time)

SELECT ordered_for, owned_by, active_service_flag, patient_workplan_id, cpr_id, encounter_id
INTO :ls_ordered_for, :ls_owned_by, :ls_active_service_flag, :ll_patient_workplan_id, :ls_cpr_id, :ll_encounter_id
FROM p_Patient_WP_Item
WHERE patient_workplan_item_id = :pl_patient_workplan_item_id;
if not tf_check() then return -1

lb_active_service = f_string_to_boolean(ls_active_service_flag)

if lb_active_service then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button_workflow.bmp"
	popup.button_helps[popup.button_count] = "Perform Service"
	popup.button_titles[popup.button_count] = "Perform Service"
	lsa_button[popup.button_count] = "PERFORM"
end if

if lb_active_service and left(ls_ordered_for, 1) = "!" and left(ls_owned_by, 1) <> "!" then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button_workflow.bmp"
	popup.button_helps[popup.button_count] = "Leave service in the Role to-do list"
	popup.button_titles[popup.button_count] = "Revert To Role"
	lsa_button[popup.button_count] = "REVERT"
end if

if lb_active_service then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button_takeover.bmp"
	popup.button_helps[popup.button_count] = "Forward service to another user"
	popup.button_titles[popup.button_count] = "Forward Service"
	lsa_button[popup.button_count] = "FORWARD"
end if

if lb_active_service then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button13.bmp"
	popup.button_helps[popup.button_count] = "Cancel Service"
	popup.button_titles[popup.button_count] = "Cancel Service"
	lsa_button[popup.button_count] = "CANCELSERVICE"
end if

if len(ls_cpr_id) > 0 and ll_encounter_id > 0 then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button_workflow.bmp"
	popup.button_helps[popup.button_count] = "Show workplan for this encounter"
	popup.button_titles[popup.button_count] = "Encounter Workplan"
	lsa_button[popup.button_count] = "ENCOUNTERWORKPLAN"
end if

if ll_patient_workplan_id > 0 then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button_workflow.bmp"
	popup.button_helps[popup.button_count] = "Show workplan containing this service"
	popup.button_titles[popup.button_count] = "Service Workplan"
	lsa_button[popup.button_count] = "SERVICEWORKPLAN"
end if

if true then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button17.bmp"
	popup.button_helps[popup.button_count] = "Display Service Properties"
	popup.button_titles[popup.button_count] = "Properties"
	lsa_button[popup.button_count] = "PROPERTIES"
end if

if popup.button_count > 1 then
	popup.button_count += 1
	popup.button_icons[popup.button_count] = "button11.bmp"
	popup.button_helps[popup.button_count] = "Cancel"
	popup.button_titles[popup.button_count] = "Cancel"
	lsa_button[popup.button_count] = "CANCEL"
end if

popup.button_titles_used = true

if popup.button_count > 1 then
	openwithparm(lw_pop_buttons, popup, "w_pop_buttons")
	button_pressed = message.doubleparm
	if button_pressed < 1 or button_pressed >= popup.button_count then return 0
elseif popup.button_count = 1 then
	button_pressed = 1
else
	return 0
end if

CHOOSE CASE lsa_button[button_pressed]
	CASE "PERFORM"
		li_sts = service_list.do_service(pl_patient_workplan_item_id)
		return li_sts
	CASE "REVERT"
		ls_status = "Revert To Original Owner"
		sqlca.sp_set_workplan_item_progress( &
				pl_patient_workplan_item_id, &
				current_user.user_id, &
				ls_status, &
				ldt_progress_date_time, &
				current_scribe.user_id, &
				gnv_app.computer_id)
		if not tf_check() then return -1
	CASE "FORWARD"
		ls_status = "Transfer"
		luo_user = user_list.pick_user(true, false, false)
		if not isnull(luo_user) then
			sqlca.sp_set_workplan_item_progress( &
					pl_patient_workplan_item_id, &
					luo_user.user_id, &
					ls_status, &
					ldt_progress_date_time, &
					current_scribe.user_id, &
					gnv_app.computer_id)
		end if
		if not tf_check() then return -1
	CASE "CANCELSERVICE"
		openwithparm(w_pop_yes_no, "Are you sure you want to cancel this service?")
		popup_return = message.powerobjectparm
		if popup_return.item = "YES" then
			ls_status = "CANCELLED"
			sqlca.sp_complete_workplan_item( &
					pl_patient_workplan_item_id, &
					current_user.user_id, &
					ls_status, &
					ldt_progress_date_time, &
					current_scribe.user_id)
			if not tf_check() then return -1
		else
			return 0
		end if
	CASE "ENCOUNTERWORKPLAN"
		lstr_context.cpr_id = ls_cpr_id
		lstr_context.context_object = "Encounter"
		lstr_context.object_key = ll_encounter_id
		openwithparm(lw_window, lstr_context, "w_patient_workplan_display")
	CASE "SERVICEWORKPLAN"
		li_sts = datalist.clinical_data_cache.patient_workplan(ll_patient_workplan_id, lstr_p_patient_wp)
		if li_sts > 0 then
			openwithparm(lw_window, lstr_p_patient_wp, "w_patient_workplan_display")
		end if
	CASE "PROPERTIES"
		service_list.display_service_properties(pl_patient_workplan_item_id)
	CASE "CANCEL"
		return 0
END CHOOSE

return 1

end function

