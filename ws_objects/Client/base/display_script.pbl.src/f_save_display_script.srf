$PBExportHeader$f_save_display_script.srf
global type f_save_display_script from function_object
end type

forward prototypes
global function integer f_save_display_script (ref str_display_script pstr_display_script)
end prototypes

global function integer f_save_display_script (ref str_display_script pstr_display_script);// This function saves the passed in display script structure back to the database
//
// If the display script is already part of the ps_parent_config_object_id, the the display script record is updated and
// all of its commands and attributes are replaced.
// If the display script is not already part of the specified ps_parent_config_object_id, then a new display script is created and
// the existing display script in the database is left unchanged.
//
// This function updates the display script structure with the actual display_script_id which holds the saved display script
// This function returns the following:
// 1	success
// -1	failure
//
// To be sure changes are rolled back on failure, use begin_transaction, rollback_transaction, and commit_transaction around this function.
// Transaction processing is not performed here.
long i
long j
long ll_display_command_id
long ll_owner_id

// First make sure we own it
SELECT owner_id
INTO :ll_owner_id
FROM c_Display_Script
WHERE display_script_id = :pstr_display_script.display_script_id;
if not tf_check() then return -1

if ll_owner_id <> sqlca.customer_id then
	log.log(po_null, "f_save_display_script:0026", "Only locally owned display scripts may be saved", 4)
	return -1
end if

// First, delete the existing commands and attributes
DELETE
FROM c_Display_Script_Cmd_Attribute
WHERE display_script_id = :pstr_display_script.display_script_id;
if not tf_check() then return -1

DELETE
FROM c_Display_Script_Command
WHERE display_script_id = :pstr_display_script.display_script_id;
if not tf_check() then return -1

// Now update the new state of the display script
UPDATE c_Display_Script
SET display_script = :pstr_display_script.display_script,
	description = :pstr_display_script.description,
	example = :pstr_display_script.example,
	last_updated = dbo.get_client_datetime(),
	updated_by = :current_scribe.user_id,
	owner_id = :sqlca.customer_id,
	script_type = :pstr_display_script.script_type,
	original_id =:pstr_display_script.original_id
WHERE display_script_id = :pstr_display_script.display_script_id;
if not tf_check() then return -1

for i = 1 to pstr_display_script.display_command_count
	ll_display_command_id = sqlca.sp_new_display_script_command(pstr_display_script.display_script_id, &
																						pstr_display_script.display_command[i].context_object, &
																						pstr_display_script.display_command[i].display_command, &
																						pstr_display_script.display_command[i].sort_sequence, &
																						pstr_display_script.display_command[i].status)
	
	if not tf_check() then return -1
	if isnull(ll_display_command_id) then
		log.log(po_null, "f_save_display_script:0066", "Could not create new display command", 4)
		return -1
	end if

	pstr_display_script.display_command[i].display_command_id = ll_display_command_id

	SELECT CAST(id AS varchar(40))
	INTO :pstr_display_script.display_command[i].id
	FROM c_Display_Script_Command
	WHERE display_script_id = :pstr_display_script.display_script_id
	AND display_command_id = :ll_display_command_id;
	if not tf_check() then return -1
	if sqlca.sqlcode = 100 then
		log.log(po_null, "f_save_display_script:0080", "Could not find new display command", 4)
		return -1
	end if
	
	for j = 1 to pstr_display_script.display_command[i].attributes.attribute_count
		if len(pstr_display_script.display_command[i].attributes.attribute[j].value) > 255 then
			// If the value is longer than 255 bytes it must go into the long_value column
			INSERT INTO c_Display_Script_Cmd_Attribute (
				display_script_id,
				display_command_id,
				attribute,
				long_value)
			VALUES (
				:pstr_display_script.display_script_id,
				:ll_display_command_id,
				:pstr_display_script.display_command[i].attributes.attribute[j].attribute,
				:pstr_display_script.display_command[i].attributes.attribute[j].value);
			if not tf_check() then return -1
		else
			// If the value is less than or equal to 255 bytes it must go into the value column
			INSERT INTO c_Display_Script_Cmd_Attribute (
				display_script_id,
				display_command_id,
				attribute,
				value)
			VALUES (
				:pstr_display_script.display_script_id,
				:ll_display_command_id,
				:pstr_display_script.display_command[i].attributes.attribute[j].attribute,
				:pstr_display_script.display_command[i].attributes.attribute[j].value);
			if not tf_check() then return -1
		end if
	next
next

return 1

end function

