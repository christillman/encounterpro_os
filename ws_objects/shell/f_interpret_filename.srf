HA$PBExportHeader$f_interpret_filename.srf
global type f_interpret_filename from function_object
end type

forward prototypes
global function integer f_interpret_filename (string ps_filename, string ps_filename_pattern, ref str_attributes pstr_attributes)
end prototypes

global function integer f_interpret_filename (string ps_filename, string ps_filename_pattern, ref str_attributes pstr_attributes);integer li_pos
integer li_pos2
integer li_pos3
integer li_filename_pos
integer li_pattern_pos
string ls_attribute_name
string ls_match_chars
string ls_filename_chars
integer li_filename_match
boolean lb_nomatch
integer i, j

pstr_attributes.attribute_count = 0

if isnull(ps_filename) or isnull(ps_filename_pattern) or len(ps_filename_pattern) <= 0 then return 0


// scan the pattern for an attribute name
li_filename_pos = 1
li_pattern_pos = 1
DO
	// First, skip the first "match any" characters
	DO WHILE mid(ps_filename_pattern, li_pattern_pos, 1) = "?"
		li_filename_pos += 1
		li_pattern_pos += 1
	LOOP
	
	li_pos = pos(ps_filename_pattern, "%", li_pattern_pos)
	if li_pos <= 0 then EXIT
	
	// We found the delimiter, so look for the other delimiter
	li_pos2 = pos(ps_filename_pattern, "%", li_pos + 1)
	if li_pos2 <= 0 then EXIT
	
	// We found the delimiter, so look for the start of the next attribute
	li_pos3 = pos(ps_filename_pattern, "%", li_pos2 + 1)
	if li_pos3 <= 0 then li_pos3 = len(ps_filename_pattern) + 1
	
	// Make sure the skipped pattern characters match the skipped filename characters
	if lower(mid(ps_filename_pattern, li_pattern_pos, li_pos - li_pattern_pos)) &
	  = lower(mid(ps_filename, li_filename_pos, li_pos - li_pattern_pos)) then
			// Move the filename_pos to the right by the same number of
			// characters that were skipped in the pattern
			li_filename_pos += li_pos - li_pattern_pos
	else
		return 0
	end if

	// Make sure the characters in between the attributes match
	// First get the match string from the pattern
	ls_match_chars = mid(ps_filename_pattern, li_pos2 + 1, li_pos3 - li_pos2 - 1)
	// Then cut it off at the first "match any" character
	if len(ls_match_chars) > 0 then
		// Search the filename for a match
		for i = li_filename_pos to len(ps_filename) - len(ls_match_chars) + 1
			lb_nomatch = false
			for j = 1 to len(ls_match_chars)
				if mid(ls_match_chars, j, 1) = "?" then continue
				if lower(mid(ps_filename, i + j - 1, 1)) = lower(mid(ls_match_chars, j, 1)) then continue
				lb_nomatch = true
				exit
			next
			if not lb_nomatch then exit
		next
		if lb_nomatch then return 0
		li_filename_match = i
		ls_filename_chars = mid(ps_filename, li_filename_pos, li_filename_match - li_filename_pos)
		if len(ls_filename_chars) <= 0 then return 0
	else
		ls_filename_chars = mid(ps_filename, li_filename_pos)
		if len(ls_filename_chars) <= 0 then return 0
	end if
	
	ls_attribute_name = mid(ps_filename_pattern, li_pos + 1, li_pos2 - li_pos - 1)
	f_attribute_add_attribute(pstr_attributes, ls_attribute_name, ls_filename_chars)
	
	li_pattern_pos = li_pos3
	li_filename_pos += len(ls_filename_chars) + len(ls_match_chars)

LOOP WHILE true

return 1

end function

