HA$PBExportHeader$f_get_component_versions.srf
global type f_get_component_versions from function_object
end type

forward prototypes
global function str_component_versions f_get_component_versions (string ps_component_id)
end prototypes

global function str_component_versions f_get_component_versions (string ps_component_id);str_component_versions lstr_component_versions
u_ds_data luo_data
long i
string ls_component_type
string ls_plugin_type

luo_data = CREATE u_ds_data
luo_data.set_dataobject("dw_fn_component_versions")
lstr_component_versions.version_count = luo_data.retrieve(ps_component_id)
if lstr_component_versions.version_count <= 0 then return lstr_component_versions

// Get the component type from the first version and look up the plugin type
ls_component_type = luo_data.object.component_type[1]
SELECT plugin_type
INTO :ls_plugin_type
FROM c_Component_Type
WHERE component_type = :ls_component_type;
if not tf_check() then return lstr_component_versions
if sqlca.sqlnrows = 0 then
	log.log(this, "f_new_component_version()", "component_type not found (" + ls_component_type + ")", 3)
end if

for i = 1 to lstr_component_versions.version_count
	lstr_component_versions.version[i].component_id = luo_data.object.component_id[i]
	lstr_component_versions.version[i].version_name = luo_data.object.version_name[i]
	lstr_component_versions.version[i].version = luo_data.object.version[i]
	lstr_component_versions.version[i].description = luo_data.object.description[i]
	lstr_component_versions.version[i].version_description = luo_data.object.version_description[i]
	lstr_component_versions.version[i].component_type = luo_data.object.component_type[i]
	lstr_component_versions.version[i].plugin_type = ls_plugin_type
	lstr_component_versions.version[i].component_class = luo_data.object.component_class[i]
	lstr_component_versions.version[i].component_location = luo_data.object.component_location[i]
	lstr_component_versions.version[i].component_data = luo_data.object.component_data[i]
	lstr_component_versions.version[i].status = luo_data.object.status[i]
	lstr_component_versions.version[i].status_date_time = luo_data.object.status_date_time[i]
	lstr_component_versions.version[i].release_status = luo_data.object.release_status[i]
	lstr_component_versions.version[i].release_status_date_time = luo_data.object.release_status_date_time[i]
	lstr_component_versions.version[i].installer = luo_data.object.installer[i]
	lstr_component_versions.version[i].independence = luo_data.object.independence[i]
	lstr_component_versions.version[i].system_id = luo_data.object.system_id[i]
	lstr_component_versions.version[i].build = luo_data.object.build[i]
	lstr_component_versions.version[i].build_name = luo_data.object.build_name[i]
	lstr_component_versions.version[i].compile = luo_data.object.compile[i]
	lstr_component_versions.version[i].compile_name = luo_data.object.compile_name[i]
	lstr_component_versions.version[i].test_begin_date = luo_data.object.test_begin_date[i]
	lstr_component_versions.version[i].beta_begin_date = luo_data.object.beta_begin_date[i]
	lstr_component_versions.version[i].release_date = luo_data.object.release_date[i]
	lstr_component_versions.version[i].build_status = luo_data.object.build_status[i]
	lstr_component_versions.version[i].notes = luo_data.object.notes[i]
	lstr_component_versions.version[i].min_build = luo_data.object.min_build[i]
	lstr_component_versions.version[i].min_modification_level = luo_data.object.min_modification_level[i]
	lstr_component_versions.version[i].max_modification_level = luo_data.object.max_modification_level[i]
	lstr_component_versions.version[i].owner_id = luo_data.object.owner_id[i]
	lstr_component_versions.version[i].owner_description = luo_data.object.owner_description[i]
	lstr_component_versions.version[i].created = luo_data.object.created[i]
	lstr_component_versions.version[i].created_by = luo_data.object.created_by[i]
	lstr_component_versions.version[i].last_updated = luo_data.object.last_updated[i]
	lstr_component_versions.version[i].id = luo_data.object.id[i]

	if lower(lstr_component_versions.version[i].independence) = "single" or lower(lstr_component_versions.version[i].independence) = "multi" then
		lstr_component_versions.version[i].independently_installable = true
	else
		lstr_component_versions.version[i].independently_installable = false
	end if
next

return lstr_component_versions


end function

