HA$PBExportHeader$f_start_tracing.srf
global type f_start_tracing from function_object
end type

forward prototypes
global function integer f_start_tracing (string ps_tracefile)
end prototypes

global function integer f_start_tracing (string ps_tracefile);errorreturn le_errorreturn

// Open the trace file
TraceOpen( ps_tracefile, trc_Timerkind )

if trc_ActESql then
	le_errorreturn = TraceEnableActivity( ActESql! )
else
	le_errorreturn = TraceDisableActivity( ActESql! )
end if

if trc_ActRoutine then
	le_errorreturn = TraceEnableActivity( ActRoutine!)
else
	le_errorreturn = TraceDisableActivity( ActRoutine! )
end if

if trc_ActUser then
	le_errorreturn = TraceEnableActivity( ActUser! )
else
	le_errorreturn = TraceDisableActivity( ActUser! )
end if

if trc_ActError then
	le_errorreturn = TraceEnableActivity( ActError! )
else
	le_errorreturn = TraceDisableActivity( ActError! )
end if

if trc_ActLine then
	le_errorreturn = TraceEnableActivity( ActLine! )
else
	le_errorreturn = TraceDisableActivity( ActLine! )
end if

if trc_ActObjectCreate then
	le_errorreturn = TraceEnableActivity( ActObjectCreate! )
else
	le_errorreturn = TraceDisableActivity( ActObjectCreate! )
end if

if trc_ActObjectDestroy then
	le_errorreturn = TraceEnableActivity( ActObjectDestroy! )
else
	le_errorreturn = TraceDisableActivity( ActObjectDestroy! )
end if

if trc_ActGarbageCollect then
	le_errorreturn = TraceEnableActivity( ActGarbageCollect! )
else
	le_errorreturn = TraceDisableActivity( ActGarbageCollect! )
end if


// Start tracing
le_errorreturn = TraceBegin( ps_tracefile )
if le_errorreturn <> Success! then return -1

return 1

end function

