HA$PBExportHeader$f_export_config_object.srf
global type f_export_config_object from function_object
end type

forward prototypes
global function integer f_export_config_object (string ps_config_object_id)
end prototypes

global function integer f_export_config_object (string ps_config_object_id);str_popup_return popup_return
str_service_info lstr_service
string ls_message
string ls_new_config_object_id
str_config_object_info lstr_config_object_info
integer li_sts

// Get the config object info
li_sts = f_get_config_object_info(ps_config_object_id, lstr_config_object_info)
if li_sts <= 0 then return -1

// Make sure the user owns this config object
if sqlca.customer_id <> lstr_config_object_info.owner_id then
	if lstr_config_object_info.copyable then
		ls_message = "You must be the owner of a "
		ls_message += lower(lstr_config_object_info.config_object_type)
		ls_message +=  " to export it.  You may make a copy of the "
		ls_message += lower(lstr_config_object_info.config_object_type)
		ls_message += " and export the copy.  Do you wish to make a copy of this "
		ls_message += lower(lstr_config_object_info.config_object_type)
		ls_message += " now?"
		openwithparm(w_pop_yes_no, ls_message)
		popup_return = message.powerobjectparm
		if popup_return.item <> "YES" then return 0
		
		
		ls_new_config_object_id = f_copy_config_object(ps_config_object_id)
		if len(ls_new_config_object_id) > 0 then
			ps_config_object_id = ls_new_config_object_id
		else
			openwithparm(w_pop_message, "An error occured copying the config_object.  See the error log for more information.")
			return -1
		end if
	else
		ls_message = "You must be the owner of a "
		ls_message += lower(lstr_config_object_info.config_object_type)
		ls_message +=  " to export it.  This "
		ls_message += lower(lstr_config_object_info.config_object_type)
		ls_message += " is not copyable."
		openwithparm(w_pop_message, ls_message)
		return 0
	end if
end if

f_attribute_add_attribute(lstr_service.attributes, "lstr_config_object_info.config_object_type", lstr_config_object_info.config_object_type)
f_attribute_add_attribute(lstr_service.attributes, "config_object_id", ps_config_object_id)
lstr_service.service = "Export Config"

service_list.do_service(lstr_service)

return 1


end function

