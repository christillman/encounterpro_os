HA$PBExportHeader$f_is_supervisor_loop.srf
global type f_is_supervisor_loop from function_object
end type

forward prototypes
global function boolean f_is_supervisor_loop (string ps_user_id, string ps_proposed_supervisor)
end prototypes

global function boolean f_is_supervisor_loop (string ps_user_id, string ps_proposed_supervisor);string ls_supervisor
string ls_next_supervisor
string lsa_supervisors[]
long ll_supervisor_count
long i
string ls_loop_name


// Check for a supervisor loop
if ps_user_id = ps_proposed_supervisor then
	openwithparm(w_pop_message, "A user may not be their own supervisor")
	return true
end if

ll_supervisor_count = 0

// Add the user to the chain
ll_supervisor_count += 1
lsa_supervisors[ll_supervisor_count] = ps_user_id

// Add the proposed supervisor to the chain
ls_supervisor = ps_proposed_supervisor
ll_supervisor_count += 1
lsa_supervisors[ll_supervisor_count] = ls_supervisor

// Traverse the chain of supervisors looking for a loop
DO WHILE len(ls_supervisor) > 0
	SELECT supervisor_user_id
	INTO :ls_next_supervisor
	FROM c_User
	WHERE user_id = :ls_supervisor;
	if not tf_check() then return true
	if sqlca.sqlnrows = 0 then exit
	
	for i = 1 to ll_supervisor_count
		if lsa_supervisors[i] = ls_next_supervisor then
			ls_loop_name = user_list.user_full_Name(ls_next_supervisor)
			openwithparm(w_pop_message, "ERROR:  Setting the supervisor to " + user_list.user_full_name(ps_proposed_supervisor) + " will cause a supervisor loop with " + ls_loop_name)
			return true
		end if
	next
	
	ls_supervisor = ls_next_supervisor
	ll_supervisor_count += 1
	lsa_supervisors[ll_supervisor_count] = ls_supervisor
LOOP

return false

end function

