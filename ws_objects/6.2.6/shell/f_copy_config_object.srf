HA$PBExportHeader$f_copy_config_object.srf
global type f_copy_config_object from function_object
end type

forward prototypes
global function string f_copy_config_object (string ps_copy_from_config_object_id)
end prototypes

global function string f_copy_config_object (string ps_copy_from_config_object_id);str_config_object_info lstr_config_object_info
str_config_object_info lstr_new_config_object_info
integer li_sts
string ls_new_config_object_id
string ls_null
long ll_latest_version
long ll_len
u_config_object_manager lo_config_object_manager
string ls_config_object_data
long ll_sts
string ls_version_description
blob lbl_objectdata
string ls_status
str_popup popup
str_popup_return popup_return
string ls_description
long ll_count
boolean lb_change_references
string ls_message
integer li_index
long ll_copy_version
str_config_object_type lstr_config_object_type

setnull(ls_null)
setnull(ls_version_description)
setnull(lbl_objectdata)
setnull(ls_status)


li_sts = f_get_config_object_info(ps_copy_from_config_object_id, lstr_config_object_info)
if li_sts <= 0 then return ls_null

// Make sure the new config object has a version record
li_sts = f_config_object_check_version(lstr_config_object_info)
if li_sts <= 0 then return ls_null

lstr_config_object_type = datalist.get_config_object_type(lstr_config_object_info.config_object_type)

setnull(ll_copy_version)

if lstr_config_object_info.installed_version >= 0 and (lstr_config_object_info.installed_version <> lstr_config_object_info.latest_version or lstr_config_object_info.installed_version <> lstr_config_object_info.earliest_version) then
	openwithparm(w_pop_yes_no, "Would you like to copy the currently installed version of this " + lower(lstr_config_object_info.config_object_type) + "?")
	popup_return = message.powerobjectparm
	if popup_return.item = "YES" then
		ll_copy_version = lstr_config_object_info.installed_version
	end if
end if	

if isnull(ll_copy_version) then
	ll_copy_version = f_config_object_pick_version(lstr_config_object_info.config_object_id, true, "Alll")
	if isnull(ll_copy_version) then return ls_null
	if ll_copy_version < 0 then return ls_null
end if

	
DO WHILE true
	popup.title = "Enter title of new " + lstr_config_object_info.config_object_type
	SELECT description
	INTO :ls_description
	FROM c_Config_Object
	WHERE config_object_id = :ps_copy_from_config_object_id;
	if not tf_check() then return ls_null
	
	popup.item = ls_description
	openwithparm(w_pop_prompt_string, popup)
	popup_return = message.powerobjectparm
	if popup_return.item_count <> 1 then return ls_null
	
	ls_description = popup_return.items[1]
	
	SELECT count(*)
	INTO :ll_count
	FROM c_Config_Object
	WHERE description = :ls_description
	AND config_object_type = :lstr_config_object_info.config_object_type;
	if not tf_check() then return ls_null
	if ll_count > 0 then
		openwithparm(w_pop_message, "There is already a " + lower(lstr_config_object_info.config_object_type) + " with that title.  Please enter a different title for the new " + lower(lstr_config_object_info.config_object_type) + ".")
	else
		exit
	end if
LOOP

openwithparm(w_pop_yes_no, "Do you want to change all references to the original " + lower(lstr_config_object_info.config_object_type) + " to use this copy?")
popup_return = message.powerobjectparm
if popup_return.item = "YES" then
	lb_change_references = true
else
	lb_change_references = false
end if

li_index = f_please_wait_open()

ll_sts = sqlca.config_copy_object(ps_copy_from_config_object_id, ll_copy_version, ls_description, current_user.user_id, ls_new_config_object_id)
if not tf_check() then
	setnull(ls_new_config_object_id)
end if

if ll_sts < 0 OR isnull(ls_new_config_object_id) then
	ls_message = "The copy failed.  Check the error log for more information."
	if lb_change_references then ls_message += "  The references to the original " + lower(lstr_config_object_info.config_object_type) + " have NOT been changed."
	openwithparm(w_pop_message, ls_message)
	f_please_wait_close(li_index)
	return ls_null
end if

if lb_change_references then
	sqlca.jmj_change_references(lstr_config_object_info.config_object_type, ps_copy_from_config_object_id, ls_new_config_object_id, current_scribe.user_id)
	if not tf_check() then
		ls_message = "The copy succeeded but the references to the original " + lower(lstr_config_object_info.config_object_type) + " have NOT been changed.  Check the error log for more information."
		openwithparm(w_pop_message, ls_message)
	end if
end if

f_please_wait_close(li_index)

// Get the info for the new config object
li_sts = f_get_config_object_info(ls_new_config_object_id, lstr_new_config_object_info)
if li_sts <= 0 then return ls_null


// Make sure the new config object has a version record
li_sts = f_config_object_check_version(lstr_new_config_object_info)
if li_sts <= 0 then return ls_null

// if the copied config object was installed or if this is an auto-install config object type, then install the copied object
if lstr_config_object_type.auto_install OR lstr_config_object_info.installed_version >= 0 then
	li_sts = f_config_object_install(ls_new_config_object_id, lstr_new_config_object_info.latest_version)
end if

return ls_new_config_object_id



end function

