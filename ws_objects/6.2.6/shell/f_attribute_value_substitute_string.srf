HA$PBExportHeader$f_attribute_value_substitute_string.srf
global type f_attribute_value_substitute_string from function_object
end type

forward prototypes
global function string f_attribute_value_substitute_string (string ps_string, str_complete_context pstr_context, str_attributes pstr_attributes)
end prototypes

global function string f_attribute_value_substitute_string (string ps_string, str_complete_context pstr_context, str_attributes pstr_attributes);long i
long ll_pos1
long ll_pos2
string ls_string
string ls_token
string ls_value
long ll_search_from
long ll_pos

// This function takes a string that may have some embedded substitution tokens surrounded by percent signs
// The substution tokens are read and passed into f_attribute_value_substitute_context for interpretation.

if isnull(ps_string) then return ps_string

ls_string = ps_string
ll_search_from = 1
ll_pos1 = 0

DO WHILE true
	// Find the next percent sign
	ll_pos = pos(ls_string, "%", ll_search_from)
	if ll_pos <= 0 then return ls_string
	// If the % is preceded by a backwards quote (`) then remove the backwards quote and skip this percent sign
	if ll_pos > 1 then
		if mid(ls_string, ll_pos - 1, 1) = "`" then
			ls_string = replace(ls_string, ll_pos - 1, 1, "")
			ll_search_from = ll_pos
			continue
		end if
	end if
	
	if ll_pos1 > 0 then
		// If we already have a pos1, then this percent sign is pos2
		ll_pos2 = ll_pos
	else
		// If we didn't have a pos1, then set it now and continue scanning for pos2
		ll_pos1 = ll_pos
		ll_search_from = ll_pos + 1
		continue
	end if
	
	ls_token = mid(ls_string, ll_pos1, ll_pos2 - ll_pos1 + 1)
	
	// Make sure it looks like a token
	if f_string_is_token(ls_token) then
		ls_value = f_attribute_value_substitute_context(ls_token, pstr_context, pstr_attributes)
		if isnull(ls_value) then ls_value = ""
		
		ls_string = replace(ls_string, ll_pos1, ll_pos2 - ll_pos1 + 1, ls_value)
		ll_search_from = ll_pos1 + len(ls_value) + 1
	else
		// If the token didn't look like a token, then start looking again at the second percent sign
		ll_search_from = ll_pos2
	end if
	
	// Reset pos1 so the next percent sign will start another token
	ll_pos1 = 0
LOOP

return ls_string


end function

