HA$PBExportHeader$f_medication_description.srf
global type f_medication_description from function_object
end type

forward prototypes
global function string f_medication_description (u_component_treatment puo_treatment)
end prototypes

global function string f_medication_description (u_component_treatment puo_treatment);str_treatment_description lstr_treatment
integer li_sts
string ls_null

setnull(ls_null)

lstr_treatment = puo_treatment.treatment_description()

return drugdb.treatment_drug_sig(lstr_treatment)


///////////////////////////////////////////////////////////////////////////////////////////////////////
////	Return: String
////
//// Modified By:Sumathi Chinnasamy									Modified On:09/17/01
////
//// Description: generates the drug description by including special ins, refills and other dosage info
//// 
//////////////////////////////////////////////////////////////////////////////////////////////////////
//
//String	ls_common_name,ls_description
//String	ls_take_as_directed,ls_prescription_flag
//String	ls_administer_method
//String	ls_temp,ls_duration,ls_brand_necessary
//String	ls_pharmacist_instructions,ls_patient_instructions
//String	ls_rx_number_to_text,ls_unit,ls_dose_text,ls_dispense_text
//integer li_sts
//Boolean	lb_rx_number_to_text
//
//u_unit						luo_unit
//str_drug_definition 		lstr_drug_definition
//str_drug_package        lstr_drug_package
//str_package_definition 	lstr_package_definition
//
//Setnull(ls_description)
//ls_rx_number_to_text = datalist.get_preference("PREFERENCES", "rx_show_number_in_text")
//if lower(left(ls_rx_number_to_text, 1)) = "t" or lower(left(ls_rx_number_to_text, 1)) = "y" then
//	lb_rx_number_to_text = true
//else
//	lb_rx_number_to_text = false
//end if
//
//// If we don't have a drug_id then there's nothing we can do so just use the treatment description
//if isnull(puo_treatment.drug_id) then return puo_treatment.treatment_description
//
//li_sts = drugdb.get_drug_definition(puo_treatment.drug_id,lstr_drug_definition)
//if li_sts <= 0 then return puo_treatment.treatment_description
//
//ls_description = lstr_drug_definition.common_name
//
//
//li_sts = drugdb.get_drug_package(puo_treatment.drug_id,puo_treatment.package_id,&
//								lstr_drug_definition,lstr_package_definition,lstr_drug_package)
//if li_sts <= 0 then
//	// We don't have a package
//	If not isnull(puo_treatment.administer_frequency) then
//		ls_description += " " + puo_treatment.administer_frequency
//	End if
//	
//	setnull(ls_duration)
//	If isnull(puo_treatment.duration_prn) then
//		If puo_treatment.duration_amount > 0 and not isnull(puo_treatment.duration_unit) then
//			ls_duration = f_pretty_amount_unit(puo_treatment.duration_amount, puo_treatment.duration_unit)
//		Elseif puo_treatment.duration_amount = -1 then
//			ls_duration = "Indefinite"
//		End if
//	Else
//		ls_duration = "PRN " + string(puo_treatment.duration_prn)
//	End if
//	If not isnull(ls_duration) and puo_treatment.duration_amount >= 0 then
//		ls_description += " x " + ls_duration
//	End if
//else
//	// We have a package
//	ls_take_as_directed = lstr_drug_package.take_as_directed
//	ls_prescription_flag = lstr_drug_package.prescription_flag
//	ls_administer_method = lstr_package_definition.administer_method
//	
//	ls_description += ", " +lstr_package_definition.description + ":"
//	
//	If ls_take_as_directed = "Y" Then
//		ls_description += "  Take As Directed"
//	Else
//		if lb_rx_number_to_text then // print text representation of numbers
//			luo_unit = unit_list.find_unit(puo_treatment.dose_unit)
//			If isvalid(luo_unit) and not isnull(luo_unit) then
//				ls_unit = luo_unit.pretty_unit(puo_treatment.dose_amount)
//				ls_dose_text = common_thread.mm.number_to_text(puo_treatment.dose_amount)
//				ls_description += "  " +ls_dose_text + " ("+string(puo_treatment.dose_amount)+") "+ls_unit
//			End If
//		else
//			ls_temp = f_pretty_amount_unit(puo_treatment.dose_amount, puo_treatment.dose_unit)
//			if not isnull(ls_temp) then
//				ls_description += "  " + ls_temp
//			end if
//		end if
////		If not isnull(puo_treatment.dose_amount) Then
////			ls_temp = f_pretty_amount_unit(puo_treatment.dose_amount, puo_treatment.dose_unit)
////			if not isnull(ls_temp) then
////				ls_description += "  " + ls_temp
////			end if
////		End if
//
//		If not isnull(ls_administer_method) then
//			ls_description += " " + ls_administer_method
//		End if
//		
//		If not isnull(puo_treatment.administer_frequency) then
//			ls_description += " " + puo_treatment.administer_frequency
//		End if
//		
//		setnull(ls_duration)
//		If isnull(puo_treatment.duration_prn) then
//			If puo_treatment.duration_amount > 0 and not isnull(puo_treatment.duration_unit) then
//				ls_duration = f_pretty_amount_unit(puo_treatment.duration_amount, puo_treatment.duration_unit)
//			Elseif puo_treatment.duration_amount = -1 then
//				ls_duration = "Indefinite"
//			End if
//		Else
//			ls_duration = "PRN " + string(puo_treatment.duration_prn)
//		End if
//		If not isnull(ls_duration) and puo_treatment.duration_amount >= 0 then
//			ls_description += " x " + ls_duration
//		End if
//	End if
//	
//	If not isnull(puo_treatment.dispense_unit) and puo_treatment.dispense_amount > 0 and not isnull(puo_treatment.dispense_amount) THEN
////		ls_description += "~r~nDispense: " + f_pretty_amount_unit(puo_treatment.dispense_amount, puo_treatment.dispense_unit)
//		if lb_rx_number_to_text then // print text representation of numbers
//			luo_unit = unit_list.find_unit(puo_treatment.dispense_unit)
//			If isvalid(luo_unit) and not isnull(luo_unit) then
//				ls_unit = luo_unit.pretty_unit(puo_treatment.dispense_amount)
//				ls_dispense_text = common_thread.mm.number_to_text(puo_treatment.dispense_amount)
//				ls_description += "~r~nDispense: " +ls_dispense_text + " ("+string(puo_treatment.dispense_amount)+") "+ls_unit
//			End If
//		else
//			ls_description += "~r~nDispense: " + f_pretty_amount_unit(puo_treatment.dispense_amount, puo_treatment.dispense_unit)
//		end if
//		if not isnull(puo_treatment.refills) then
//			IF puo_treatment.refills = 0 THEN
//				ls_description += "~r~nNo Refills"
//			ELSEIf puo_treatment.refills = -1 Then
//				ls_description += "~r~nRefills PRN"
//			ELSE
//				ls_description += "~r~n" + string(puo_treatment.refills) + " Refill"
//				IF puo_treatment.refills > 1 THEN ls_description += "s"
//			END IF
//		end if
//	END IF
//
//	IF puo_treatment.brand_name_required = "Y" THEN
//		ls_brand_necessary = datalist.get_preference("PREFERENCES","brand_necessary_phrase")
//		If Isnull(ls_brand_necessary) Then 
//			ls_description += "~r~nBrand Necessary"
//		else
//			ls_description += "~r~n"+ls_brand_necessary
//		end if
//	END IF
//end if
//
//
//Return ls_description
//
end function

