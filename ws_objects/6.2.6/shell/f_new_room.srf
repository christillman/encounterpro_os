HA$PBExportHeader$f_new_room.srf
global type f_new_room from function_object
end type

forward prototypes
global function str_room f_new_room (string ps_office_id)
end prototypes

global function str_room f_new_room (string ps_office_id);str_popup popup
str_popup_return popup_return
long ll_sts
long ll_count
u_ds_data luo_data
str_room lstr_room
string ls_room_id

lstr_room = f_empty_room()

popup.dataobject = "dw_c_room_type"
popup.datacolumn = 1
popup.displaycolumn = 2
openwithparm(w_pop_pick, popup)
popup_return = message.powerobjectparm
if popup_return.item_count <> 1 then return lstr_room

lstr_room.room_type = popup_return.items[1]

DO WHILE true
	popup.dataobject = ""
	popup.datacolumn = 0
	popup.displaycolumn = 24
	popup.title = "Enter the name of the new room"
	openwithparm(w_pop_prompt_string, popup)
	popup_return = message.powerobjectparm
	if popup_return.item_count <> 1 then return lstr_room
	
	SELECT count(*)
	INTO :ll_count
	FROM o_Rooms
	WHERE room_name = :popup_return.items[1]
	AND office_id = :ps_office_id;
	if not tf_check() then return lstr_room
	
	if ll_count =  0 then
		lstr_room.room_name = popup_return.items[1]
		exit
	end if
	
	openwithparm(w_pop_message, "That room name is already in use.  Please enter a unique room name.")
LOOP

sqlca.jmj_new_room(lstr_room.room_type, lstr_room.room_name, ps_office_id, ref ls_room_id)
if not tf_check() then return lstr_room

lstr_room.room_id = ls_room_id

return lstr_room

end function

