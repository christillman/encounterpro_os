HA$PBExportHeader$f_configure_config_object.srf
global type f_configure_config_object from function_object
end type

forward prototypes
global function integer f_configure_config_object (string ps_config_object_id)
end prototypes

global function integer f_configure_config_object (string ps_config_object_id);str_config_object_info lstr_config_object_info
integer li_sts
str_service_info lstr_service
string ls_config_object_type

li_sts = f_get_config_object_info(ps_config_object_id, lstr_config_object_info)
if li_sts <= 0 then return li_sts

// If there is no installed version then we can't configure it
if isnull(lstr_config_object_info.installed_version) then return 0

SELECT configuration_service
INTO :lstr_service.service
FROM c_Config_Object_Type
WHERE config_object_type = :lstr_config_object_info.config_object_type;
if not tf_check() then return -1

if isnull(lstr_service.service) or trim(lstr_service.service) = "" then
	openwithparm(w_pop_message, "No configuration service has been configured for " + lstr_config_object_info.config_object_type + "s.")
	return 0
end if


f_attribute_add_attribute(lstr_service.attributes, "config_object_type", ls_config_object_type)
f_attribute_add_attribute(lstr_service.attributes, "config_object_id", ps_config_object_id)

service_list.do_service(lstr_service)

return 1

end function

