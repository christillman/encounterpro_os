HA$PBExportHeader$f_configure_interface_transport_actors.srf
global type f_configure_interface_transport_actors from function_object
end type

forward prototypes
global function integer f_configure_interface_transport_actors (long pl_interfaceserviceid, long pl_transportsequence)
end prototypes

global function integer f_configure_interface_transport_actors (long pl_interfaceserviceid, long pl_transportsequence);integer li_sts
str_popup popup
str_popup_return popup_return
long i, j
string ls_interfaceservicetype
string ls_interfacedescription
string ls_interface_document_route
string ls_document_route_suffix
string ls_document_route
u_ds_data luo_data
u_ds_data luo_actors
string ls_receive_flag
string ls_send_flag
string ls_find
long ll_row
long ll_route_actor_count
string ls_actor_class
boolean lb_found
string ls_document_format

if isnull(pl_interfaceserviceid) then
	log.log(this, "new_interface_transport()", "NULL interface service id", 4)
	return -1
end if

if isnull(pl_transportsequence) then
	log.log(this, "new_interface_transport()", "NULL transport sequence", 4)
	return -1
end if

// Get some info about the interface
SELECT description, interfaceservicetype, document_route, receive_flag, send_flag
INTO :ls_interfacedescription, :ls_interfaceservicetype, :ls_interface_document_route, :ls_receive_flag, :ls_send_flag
FROM c_component_interface
WHERE interfaceserviceid = :pl_interfaceserviceid;
if not tf_check() then return -1
if sqlca.sqlnrows = 0 then
	log.log(this, "new_interface_transport()", "interface service id not found (" + string(pl_interfaceserviceid) + ")", 4)
	return -1
end if

SELECT document_route_suffix
INTO :ls_document_route_suffix
FROM c_component_interface_Route
WHERE interfaceserviceid = :pl_interfaceserviceid
AND transportsequence = :pl_transportsequence;
if not tf_check() then return -1
if sqlca.sqlnrows = 0 then
	log.log(this, "new_interface_transport()", "interface service id not found (" + string(pl_interfaceserviceid) + ")", 4)
	return -1
end if

if len(ls_document_route_suffix) > 0 then
	ls_document_route = ls_interface_document_route + "." + ls_document_route_suffix
else
	ls_document_route = ls_interface_document_route
end if

SELECT document_format
INTO :ls_document_format
FROM c_Document_Route
WHERE document_route = :ls_document_route;
if not tf_check() then return -1
if sqlca.sqlnrows = 0 then
	log.log(this, "new_interface_transport()", "document_route not found (" + ls_document_route + ")", 4)
	return -1
end if


// Get the existing attributes for this transport
luo_data = CREATE u_ds_data
luo_data.set_dataobject("dw_actor_classes_for_route")
ll_route_actor_count = luo_data.retrieve(ls_document_route)

luo_actors = CREATE u_ds_data
luo_actors.set_dataobject("dw_c_actor_class")
popup.data_row_count = luo_actors.retrieve()

for i = 1 to popup.data_row_count
	popup.items[i] = luo_actors.object.actor_class[i]
	
	ls_find = "lower(actor_class) = '" + lower(popup.items[i]) + "'"
	ll_row = luo_data.find(ls_find, 1, ll_route_actor_count)
	if ll_row > 0 then
		popup.preselected_items[i] = true
	else
		popup.preselected_items[i] = false
	end if
next
popup.title = "Allowed Actor Classes"
openwithparm(w_pop_pick, popup)
popup_return = message.powerobjectparm
if popup_return.cancel_selected then return 0

// Delete any rows that weren't picked
for i = ll_route_actor_count to 1 step -1 // go backwards so the deletes don't mess up the row numbers
	ls_actor_class = luo_data.object.actor_class[i]
	lb_found = false
	for j = 1 to popup_return.item_count
		if lower(popup_return.items[i]) = lower(ls_actor_class) then
			lb_found = true
			exit
		end if
	next
	if not lb_found then
		luo_data.deleterow(i)
	end if
next

// Now add any rows that were not already in the selected list		
for i = 1 to popup_return.item_count
	ls_find = "lower(actor_class) = '" + lower(popup_return.items[i]) + "'"
	ll_row = luo_data.find(ls_find, 1, luo_data.rowcount())
	if ll_row = 0 then
		ll_row = luo_data.insertrow(0)
		luo_data.object.actor_class[ll_row] = popup_return.items[i]
		luo_data.object.document_route[ll_row] = ls_document_route
		luo_data.object.document_format[ll_row] = ls_document_format
		luo_data.object.status[ll_row] = "OK"
		luo_data.object.owner_id[ll_row] = sqlca.customer_id
	end if
next

li_sts = luo_data.update()

DESTROY luo_data
DESTROY luo_actors

return 1



end function

