HA$PBExportHeader$f_string_to_blob.srf
global type f_string_to_blob from function_object
end type

forward prototypes
global function blob f_string_to_blob (string ps_string, string ps_encoding)
end prototypes

global function blob f_string_to_blob (string ps_string, string ps_encoding);blob lbl_blob

setnull(lbl_blob)

if isnull(ps_string) OR len(ps_string) = 0 then
	return lbl_blob
end if

CHOOSE CASE upper(ps_encoding)
	CASE "ANSI"
		lbl_blob = blob(ps_string, EncodingANSI!)
	CASE "UTF-8"
		lbl_blob = blob(ps_string, EncodingUTF8!)
	CASE "UTF-16", "UTF-16LE"
		lbl_blob = blob(ps_string, EncodingUTF16LE!)
	CASE "UTF-16BE"
		lbl_blob = blob(ps_string, EncodingUTF16BE!)
	CASE "BASE64"
		// Convert the base64 attachment into a blob
		TRY
			lbl_blob = common_thread.eprolibnet4.ConvertBase64ToBinary(ps_string)
		CATCH (throwable lt_error)
			log.log(this, "f_string_to_blob()", "Error calling base64 to binary conversion (" + lt_error.text + ")", 4)
			return lbl_blob
		END TRY
	CASE "BINHEX", "HEX"
		// Convert the hexbinary attachment into a blob
		TRY
			lbl_blob = common_thread.eprolibnet4.converthextobinary(ps_string)
		CATCH (throwable lt_error2)
			log.log(this, "f_string_to_blob()", "Error calling hex to binary conversion (" + lt_error2.text + ")", 4)
			return lbl_blob
		END TRY
	CASE ELSE
		// The default is to use the system default
		lbl_blob = blob(ps_string)
END CHOOSE


return lbl_blob

end function

